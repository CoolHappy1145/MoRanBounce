package kotlin.collections;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.RandomAccess;
import java.util.Set;
import jdk.nashorn.internal.runtime.regexp.joni.constants.OPCode;
import kotlin.Metadata;
import kotlin.Pair;
import kotlin.SinceKotlin;
import kotlin.TuplesKt;
import kotlin.TypeCastException;
import kotlin.Unit;
import kotlin.comparisons.ComparisonsKt;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt;
import kotlin.internal.HidesMembers;
import kotlin.internal.InlineOnly;
import kotlin.internal.PlatformImplementationsKt;
import kotlin.jvm.JvmName;
import kotlin.jvm.functions.Function0;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.functions.Function2;
import kotlin.jvm.functions.Function3;
import kotlin.jvm.internal.DoubleCompanionObject;
import kotlin.jvm.internal.Intrinsics;
import kotlin.random.Random;
import kotlin.ranges.IntRange;
import kotlin.ranges.RangesKt;
import kotlin.sequences.Sequence;
import kotlin.sequences.SequencesKt;
import kotlin.text.StringsKt;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/* compiled from: _Collections.kt */
@Metadata(m24mv = {1, 1, OPCode.EXACTN_IC}, m25bv = {1, 0, 3}, m23k = 5, m30xi = 1, m26d1 = {"\ufffd\ufffd\u00da\u0002\n\ufffd\ufffd\n\u0002\u0010\u000b\n\ufffd\ufffd\n\u0002\u0010\u001c\n\ufffd\ufffd\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\ufffd\ufffd\n\u0002\u0010$\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010%\n\u0002\b\b\n\u0002\u0010\u0006\n\u0002\u0010\u0005\n\u0002\b\u0002\n\u0002\u0010\u0007\n\ufffd\ufffd\n\u0002\u0010\b\n\ufffd\ufffd\n\u0002\u0010\t\n\ufffd\ufffd\n\u0002\u0010\n\n\u0002\b\u0002\n\u0002\u0010 \n\u0002\b\t\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u001e\n\u0002\b\u0013\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u001f\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\ufffd\ufffd\n\u0002\b\u0013\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\u0002\n\u0002\b\u0006\n\u0002\u0010!\n\ufffd\ufffd\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\"\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\r\n\u0002\b\u0006\n\u0002\u0010\u000e\n\u0002\b\f\n\u0002\u0010\u000f\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0010\u0011\n\u0002\b\f\n\u0002\u0018\u0002\n\u0002\b\u0010\n\u0002\u0018\u0002\n\u0002\b\u0017\n\u0002\u0010\u0018\n\ufffd\ufffd\n\u0002\u0010\u0012\n\ufffd\ufffd\n\u0002\u0010\u0019\n\u0002\u0010\f\n\u0002\b\u0002\n\u0002\u0010\u0013\n\ufffd\ufffd\n\u0002\u0010\u0014\n\ufffd\ufffd\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\ufffd\ufffd\n\u0002\u0010\u0015\n\u0002\b\u0002\n\u0002\u0010\u0016\n\u0002\b\u0002\n\u0002\u0010#\n\u0002\b\u0002\n\u0002\u0010\u0017\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0006\u001a-\u0010\ufffd\ufffd\u001a\u00020\u0001\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\u0016\u0010\u0006\u001a\u00020\u0001\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a-\u0010\u0006\u001a\u00020\u0001\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\u001f\u0010\u0007\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0087\b\u001a\u001c\u0010\b\u001a\b\u0012\u0004\u0012\u0002H\u00020\t\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aQ\u0010\n\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001e\u0010\u000e\u001a\u001a\u0012\u0004\u0012\u0002H\u0002\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000f0\u0005H\u0086\b\u001a?\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\u00020\u000b\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u001aY\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b\u001aZ\u0010\u0013\u001a\u0002H\u0014\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0018\b\u0002\u0010\u0014*\u0012\u0012\u0006\b\ufffd\ufffd\u0012\u0002H\f\u0012\u0006\b\ufffd\ufffd\u0012\u0002H\u00020\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u00a2\u0006\u0002\u0010\u0017\u001at\u0010\u0013\u001a\u0002H\u0014\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u0018\b\u0003\u0010\u0014*\u0012\u0012\u0006\b\ufffd\ufffd\u0012\u0002H\f\u0012\u0006\b\ufffd\ufffd\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b\u00a2\u0006\u0002\u0010\u0018\u001al\u0010\u0019\u001a\u0002H\u0014\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u0018\b\u0003\u0010\u0014*\u0012\u0012\u0006\b\ufffd\ufffd\u0012\u0002H\f\u0012\u0006\b\ufffd\ufffd\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u001e\u0010\u000e\u001a\u001a\u0012\u0004\u0012\u0002H\u0002\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000f0\u0005H\u0086\b\u00a2\u0006\u0002\u0010\u0017\u001a?\u0010\u001a\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\ufffd\ufffd\u0010\f\"\u0004\b\u0001\u0010\r*\b\u0012\u0004\u0012\u0002H\f0\u00032\u0012\u0010\u001b\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u0005H\u0087\b\u001aZ\u0010\u001c\u001a\u0002H\u0014\"\u0004\b\ufffd\ufffd\u0010\f\"\u0004\b\u0001\u0010\r\"\u0018\b\u0002\u0010\u0014*\u0012\u0012\u0006\b\ufffd\ufffd\u0012\u0002H\f\u0012\u0006\b\ufffd\ufffd\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\f0\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u001b\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u0005H\u0087\b\u00a2\u0006\u0002\u0010\u0017\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007\u00a2\u0006\u0002\b \u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007\u00a2\u0006\u0002\b!\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007\u00a2\u0006\u0002\b#\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020$0\u0003H\u0007\u00a2\u0006\u0002\b%\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020&0\u0003H\u0007\u00a2\u0006\u0002\b'\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020(0\u0003H\u0007\u00a2\u0006\u0002\b)\u001a,\u0010*\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$H\u0007\u001aF\u0010*\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$2\u0018\u0010\u000e\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+\u0012\u0004\u0012\u0002H-0\u0005H\u0007\u001a\u001e\u0010.\u001a\u0002H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+H\u0087\n\u00a2\u0006\u0002\u0010/\u001a\u001e\u00100\u001a\u0002H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+H\u0087\n\u00a2\u0006\u0002\u0010/\u001a\u001e\u00101\u001a\u0002H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+H\u0087\n\u00a2\u0006\u0002\u0010/\u001a\u001e\u00102\u001a\u0002H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+H\u0087\n\u00a2\u0006\u0002\u0010/\u001a\u001e\u00103\u001a\u0002H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+H\u0087\n\u00a2\u0006\u0002\u0010/\u001a+\u00104\u001a\u00020\u0001\"\t\b\ufffd\ufffd\u0010\u0002\u00a2\u0006\u0002\b5*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002H\u0086\u0002\u00a2\u0006\u0002\u00107\u001a\u0019\u00108\u001a\u00020$\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u000209H\u0087\b\u001a\u0016\u00108\u001a\u00020$\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a-\u00108\u001a\u00020$\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\u001c\u0010:\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a9\u0010;\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u001a$\u0010=\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010>\u001a\u00020$\u001a$\u0010?\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010>\u001a\u00020$\u001a3\u0010@\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a3\u0010A\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a#\u0010B\u001a\u0002H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010C\u001a\u00020$\u00a2\u0006\u0002\u0010D\u001a&\u0010B\u001a\u0002H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010C\u001a\u00020$H\u0087\b\u00a2\u0006\u0002\u0010E\u001a7\u0010F\u001a\u0002H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010C\u001a\u00020$2\u0012\u0010G\u001a\u000e\u0012\u0004\u0012\u00020$\u0012\u0004\u0012\u0002H\u00020\u0005\u00a2\u0006\u0002\u0010H\u001a:\u0010F\u001a\u0002H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010C\u001a\u00020$2\u0012\u0010G\u001a\u000e\u0012\u0004\u0012\u00020$\u0012\u0004\u0012\u0002H\u00020\u0005H\u0087\b\u00a2\u0006\u0002\u0010I\u001a%\u0010J\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010C\u001a\u00020$\u00a2\u0006\u0002\u0010D\u001a(\u0010J\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010C\u001a\u00020$H\u0087\b\u00a2\u0006\u0002\u0010E\u001a3\u0010K\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001aH\u0010L\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010\u0004\u001a#\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010MH\u0086\b\u001aa\u0010P\u001a\u0002HQ\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u0010\b\u0001\u0010Q*\n\u0012\u0006\b\ufffd\ufffd\u0012\u0002H\u00020R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2'\u0010\u0004\u001a#\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010MH\u0086\b\u00a2\u0006\u0002\u0010S\u001a$\u0010T\u001a\r\u0012\t\u0012\u0007H-\u00a2\u0006\u0002\bU0+\"\u0006\b\ufffd\ufffd\u0010-\u0018\u0001*\u0006\u0012\u0002\b\u00030\u0003H\u0086\b\u001a8\u0010V\u001a\u0002HQ\"\u0006\b\ufffd\ufffd\u0010-\u0018\u0001\"\u0010\b\u0001\u0010Q*\n\u0012\u0006\b\ufffd\ufffd\u0012\u0002H-0R*\u0006\u0012\u0002\b\u00030\u00032\u0006\u0010\u0016\u001a\u0002HQH\u0086\b\u00a2\u0006\u0002\u0010W\u001a3\u0010X\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\"\u0010Y\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\b\b\ufffd\ufffd\u0010\u0002*\u00020Z*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u0003\u001a;\u0010[\u001a\u0002HQ\"\u0010\b\ufffd\ufffd\u0010Q*\n\u0012\u0006\b\ufffd\ufffd\u0012\u0002H\u00020R\"\b\b\u0001\u0010\u0002*\u00020Z*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ\u00a2\u0006\u0002\u0010W\u001aL\u0010\\\u001a\u0002HQ\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u0010\b\u0001\u0010Q*\n\u0012\u0006\b\ufffd\ufffd\u0012\u0002H\u00020R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010]\u001aL\u0010^\u001a\u0002HQ\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u0010\b\u0001\u0010Q*\n\u0012\u0006\b\ufffd\ufffd\u0012\u0002H\u00020R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010]\u001a4\u0010_\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0087\b\u00a2\u0006\u0002\u0010`\u001a4\u0010a\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0087\b\u00a2\u0006\u0002\u0010`\u001a4\u0010a\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0087\b\u00a2\u0006\u0002\u0010b\u001a\u001b\u0010c\u001a\u0002H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0002\u0010d\u001a2\u0010c\u001a\u0002H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010`\u001a\u001b\u0010c\u001a\u0002H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+\u00a2\u0006\u0002\u0010/\u001a\u001d\u0010e\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0002\u0010d\u001a4\u0010e\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010`\u001a\u001d\u0010e\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+\u00a2\u0006\u0002\u0010/\u001a?\u0010f\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\u00030\u0005H\u0086\b\u001aX\u0010g\u001a\u0002HQ\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010Q*\n\u0012\u0006\b\ufffd\ufffd\u0012\u0002H-0R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\u00030\u0005H\u0086\b\u00a2\u0006\u0002\u0010]\u001aU\u0010h\u001a\u0002H-\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010i\u001a\u0002H-2'\u0010j\u001a#\u0012\u0013\u0012\u0011H-\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0MH\u0086\b\u00a2\u0006\u0002\u0010l\u001aj\u0010m\u001a\u0002H-\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010i\u001a\u0002H-2<\u0010j\u001a8\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0013\u0012\u0011H-\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0nH\u0086\b\u00a2\u0006\u0002\u0010o\u001aU\u0010p\u001a\u0002H-\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010i\u001a\u0002H-2'\u0010j\u001a#\u0012\u0004\u0012\u0002H\u0002\u0012\u0013\u0012\u0011H-\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H-0MH\u0086\b\u00a2\u0006\u0002\u0010q\u001aj\u0010r\u001a\u0002H-\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010i\u001a\u0002H-2<\u0010j\u001a8\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0013\u0012\u0011H-\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H-0nH\u0086\b\u00a2\u0006\u0002\u0010s\u001a-\u0010t\u001a\u00020u\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010v\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020u0\u0005H\u0087\b\u001aB\u0010w\u001a\u00020u\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010v\u001a#\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020u0MH\u0086\b\u001a:\u0010x\u001a\u0002H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010C\u001a\u00020$2\u0012\u0010G\u001a\u000e\u0012\u0004\u0012\u00020$\u0012\u0004\u0012\u0002H\u00020\u0005H\u0087\b\u00a2\u0006\u0002\u0010I\u001a%\u0010y\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010C\u001a\u00020$\u00a2\u0006\u0002\u0010E\u001aE\u0010z\u001a\u0014\u0012\u0004\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u000b\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u001a_\u0010z\u001a\u0014\u0012\u0004\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\r0+0\u000b\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b\u001a^\u0010{\u001a\u0002H\u0014\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u001c\b\u0002\u0010\u0014*\u0016\u0012\u0006\b\ufffd\ufffd\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020|0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u00a2\u0006\u0002\u0010\u0017\u001ax\u0010{\u001a\u0002H\u0014\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u001c\b\u0003\u0010\u0014*\u0016\u0012\u0006\b\ufffd\ufffd\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\r0|0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b\u00a2\u0006\u0002\u0010\u0018\u001aA\u0010}\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0~\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0014\b\u0004\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0087\b\u001a)\u0010\u007f\u001a\u00020$\"\t\b\ufffd\ufffd\u0010\u0002\u00a2\u0006\u0002\b5*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002\u00a2\u0006\u0003\u0010\u0080\u0001\u001a)\u0010\u007f\u001a\u00020$\"\t\b\ufffd\ufffd\u0010\u0002\u00a2\u0006\u0002\b5*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u00106\u001a\u0002H\u0002\u00a2\u0006\u0003\u0010\u0081\u0001\u001a.\u0010\u0082\u0001\u001a\u00020$\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a.\u0010\u0082\u0001\u001a\u00020$\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a.\u0010\u0083\u0001\u001a\u00020$\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a.\u0010\u0083\u0001\u001a\u00020$\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a0\u0010\u0084\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00020\u0085\u0001\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0086\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0004\u001a\u008d\u0001\u0010\u0087\u0001\u001a\u0003H\u0088\u0001\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u000f\b\u0001\u0010\u0088\u0001*\b0\u0089\u0001j\u0003`\u008a\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\b\u0010\u008b\u0001\u001a\u0003H\u0088\u00012\n\b\u0002\u0010\u008c\u0001\u001a\u00030\u008d\u00012\n\b\u0002\u0010\u008e\u0001\u001a\u00030\u008d\u00012\n\b\u0002\u0010\u008f\u0001\u001a\u00030\u008d\u00012\t\b\u0002\u0010\u0090\u0001\u001a\u00020$2\n\b\u0002\u0010\u0091\u0001\u001a\u00030\u008d\u00012\u0017\b\u0002\u0010\u000e\u001a\u0011\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u00030\u008d\u0001\u0018\u00010\u0005\u00a2\u0006\u0003\u0010\u0092\u0001\u001al\u0010\u0093\u0001\u001a\u00030\u0094\u0001\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\n\b\u0002\u0010\u008c\u0001\u001a\u00030\u008d\u00012\n\b\u0002\u0010\u008e\u0001\u001a\u00030\u008d\u00012\n\b\u0002\u0010\u008f\u0001\u001a\u00030\u008d\u00012\t\b\u0002\u0010\u0090\u0001\u001a\u00020$2\n\b\u0002\u0010\u0091\u0001\u001a\u00030\u008d\u00012\u0017\b\u0002\u0010\u000e\u001a\u0011\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u00030\u008d\u0001\u0018\u00010\u0005\u001a\u001c\u0010\u0095\u0001\u001a\u0002H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0002\u0010d\u001a3\u0010\u0095\u0001\u001a\u0002H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010`\u001a\u001c\u0010\u0095\u0001\u001a\u0002H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+\u00a2\u0006\u0002\u0010/\u001a3\u0010\u0095\u0001\u001a\u0002H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010b\u001a*\u0010\u0096\u0001\u001a\u00020$\"\t\b\ufffd\ufffd\u0010\u0002\u00a2\u0006\u0002\b5*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002\u00a2\u0006\u0003\u0010\u0080\u0001\u001a*\u0010\u0096\u0001\u001a\u00020$\"\t\b\ufffd\ufffd\u0010\u0002\u00a2\u0006\u0002\b5*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u00106\u001a\u0002H\u0002\u00a2\u0006\u0003\u0010\u0081\u0001\u001a\u001e\u0010\u0097\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0002\u0010d\u001a5\u0010\u0097\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010`\u001a\u001e\u0010\u0097\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+\u00a2\u0006\u0002\u0010/\u001a5\u0010\u0097\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010b\u001a:\u0010\u0098\u0001\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u000e\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0086\b\u001aO\u0010\u0099\u0001\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010\u000e\u001a#\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0MH\u0086\b\u001aU\u0010\u009a\u0001\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\ufffd\ufffd\u0010\u0002\"\b\b\u0001\u0010-*\u00020Z*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010\u000e\u001a%\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0MH\u0086\b\u001an\u0010\u009b\u0001\u001a\u0002HQ\"\u0004\b\ufffd\ufffd\u0010\u0002\"\b\b\u0001\u0010-*\u00020Z\"\u0010\b\u0002\u0010Q*\n\u0012\u0006\b\ufffd\ufffd\u0012\u0002H-0R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2)\u0010\u000e\u001a%\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0MH\u0086\b\u00a2\u0006\u0002\u0010S\u001ah\u0010\u009c\u0001\u001a\u0002HQ\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010Q*\n\u0012\u0006\b\ufffd\ufffd\u0012\u0002H-0R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2'\u0010\u000e\u001a#\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0MH\u0086\b\u00a2\u0006\u0002\u0010S\u001a@\u0010\u009d\u0001\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\ufffd\ufffd\u0010\u0002\"\b\b\u0001\u0010-*\u00020Z*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0014\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b\u001aY\u0010\u009e\u0001\u001a\u0002HQ\"\u0004\b\ufffd\ufffd\u0010\u0002\"\b\b\u0001\u0010-*\u00020Z\"\u0010\b\u0002\u0010Q*\n\u0012\u0006\b\ufffd\ufffd\u0012\u0002H-0R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2\u0014\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b\u00a2\u0006\u0002\u0010]\u001aS\u0010\u009f\u0001\u001a\u0002HQ\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010Q*\n\u0012\u0006\b\ufffd\ufffd\u0012\u0002H-0R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2\u0012\u0010\u000e\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0086\b\u00a2\u0006\u0002\u0010]\u001a*\u0010\u00a0\u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\ufffd\ufffd\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u00a1\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0003\u0010\u00a2\u0001\u001a\u001b\u0010\u00a0\u0001\u001a\u0004\u0018\u00010\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007\u00a2\u0006\u0003\u0010\u00a3\u0001\u001a\u001b\u0010\u00a0\u0001\u001a\u0004\u0018\u00010\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007\u00a2\u0006\u0003\u0010\u00a4\u0001\u001aF\u0010\u00a5\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u00a1\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0086\b\u00a2\u0006\u0002\u0010`\u001a>\u0010\u00a6\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u00a7\u0001\u001a\u0018\u0012\u0006\b\ufffd\ufffd\u0012\u0002H\u00020\u00a8\u0001j\u000b\u0012\u0006\b\ufffd\ufffd\u0012\u0002H\u0002`\u00a9\u0001\u00a2\u0006\u0003\u0010\u00aa\u0001\u001a*\u0010\u00ab\u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\ufffd\ufffd\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u00a1\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0003\u0010\u00a2\u0001\u001a\u001b\u0010\u00ab\u0001\u001a\u0004\u0018\u00010\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007\u00a2\u0006\u0003\u0010\u00a3\u0001\u001a\u001b\u0010\u00ab\u0001\u001a\u0004\u0018\u00010\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007\u00a2\u0006\u0003\u0010\u00a4\u0001\u001aF\u0010\u00ac\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u00a1\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0086\b\u00a2\u0006\u0002\u0010`\u001a>\u0010\u00ad\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u00a7\u0001\u001a\u0018\u0012\u0006\b\ufffd\ufffd\u0012\u0002H\u00020\u00a8\u0001j\u000b\u0012\u0006\b\ufffd\ufffd\u0012\u0002H\u0002`\u00a9\u0001\u00a2\u0006\u0003\u0010\u00aa\u0001\u001a.\u0010\u00ae\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002H\u0086\u0002\u00a2\u0006\u0003\u0010\u00af\u0001\u001a8\u0010\u00ae\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010\u00b0\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020\u00b1\u0001H\u0086\u0002\u00a2\u0006\u0003\u0010\u00b2\u0001\u001a/\u0010\u00ae\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u00b0\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0002\u001a/\u0010\u00ae\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u00b0\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\tH\u0086\u0002\u001a.\u0010\u00b3\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002H\u0087\b\u00a2\u0006\u0003\u0010\u00af\u0001\u001a\u0017\u0010\u00b4\u0001\u001a\u00020\u0001\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a.\u0010\u00b4\u0001\u001a\u00020\u0001\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a>\u0010\u00b5\u0001\u001a\u0002HQ\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u000e\b\u0001\u0010Q*\b\u0012\u0004\u0012\u0002H\u00020\u0003*\u0002HQ2\u0012\u0010v\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020u0\u0005H\u0087\b\u00a2\u0006\u0003\u0010\u00b6\u0001\u001aF\u0010\u00b7\u0001\u001a\u001a\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u000f\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a.\u0010\u00b8\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002092\u0006\u00106\u001a\u0002H\u0002H\u0086\u0002\u00a2\u0006\u0003\u0010\u00b9\u0001\u001a8\u0010\u00b8\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002092\u0010\u0010\u00b0\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020\u00b1\u0001H\u0086\u0002\u00a2\u0006\u0003\u0010\u00ba\u0001\u001a/\u0010\u00b8\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002092\r\u0010\u00b0\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0002\u001a/\u0010\u00b8\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002092\r\u0010\u00b0\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\tH\u0086\u0002\u001a.\u0010\u00b8\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002H\u0086\u0002\u00a2\u0006\u0003\u0010\u00af\u0001\u001a8\u0010\u00b8\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010\u00b0\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020\u00b1\u0001H\u0086\u0002\u00a2\u0006\u0003\u0010\u00b2\u0001\u001a/\u0010\u00b8\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u00b0\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0002\u001a/\u0010\u00b8\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u00b0\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\tH\u0086\u0002\u001a.\u0010\u00bb\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002092\u0006\u00106\u001a\u0002H\u0002H\u0087\b\u00a2\u0006\u0003\u0010\u00b9\u0001\u001a.\u0010\u00bb\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002H\u0087\b\u00a2\u0006\u0003\u0010\u00af\u0001\u001a \u0010\u00bc\u0001\u001a\u0002H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u000209H\u0087\b\u00a2\u0006\u0003\u0010\u00bd\u0001\u001a)\u0010\u00bc\u0001\u001a\u0002H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002092\b\u0010\u00bc\u0001\u001a\u00030\u00be\u0001H\u0007\u00a2\u0006\u0003\u0010\u00bf\u0001\u001aX\u0010\u00c0\u0001\u001a\u0003H\u00c1\u0001\"\u0005\b\ufffd\ufffd\u0010\u00c1\u0001\"\t\b\u0001\u0010\u0002*\u0003H\u00c1\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010j\u001a%\u0012\u0014\u0012\u0012H\u00c1\u0001\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H\u00c1\u00010MH\u0086\b\u00a2\u0006\u0003\u0010\u00c2\u0001\u001am\u0010\u00c3\u0001\u001a\u0003H\u00c1\u0001\"\u0005\b\ufffd\ufffd\u0010\u00c1\u0001\"\t\b\u0001\u0010\u0002*\u0003H\u00c1\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032>\u0010j\u001a:\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0014\u0012\u0012H\u00c1\u0001\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H\u00c1\u00010nH\u0086\b\u00a2\u0006\u0003\u0010\u00c4\u0001\u001aX\u0010\u00c5\u0001\u001a\u0003H\u00c1\u0001\"\u0005\b\ufffd\ufffd\u0010\u00c1\u0001\"\t\b\u0001\u0010\u0002*\u0003H\u00c1\u0001*\b\u0012\u0004\u0012\u0002H\u00020+2)\u0010j\u001a%\u0012\u0004\u0012\u0002H\u0002\u0012\u0014\u0012\u0012H\u00c1\u0001\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0005\u0012\u0003H\u00c1\u00010MH\u0086\b\u00a2\u0006\u0003\u0010\u00c6\u0001\u001am\u0010\u00c7\u0001\u001a\u0003H\u00c1\u0001\"\u0005\b\ufffd\ufffd\u0010\u00c1\u0001\"\t\b\u0001\u0010\u0002*\u0003H\u00c1\u0001*\b\u0012\u0004\u0012\u0002H\u00020+2>\u0010j\u001a:\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0014\u0012\u0012H\u00c1\u0001\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0005\u0012\u0003H\u00c1\u00010nH\u0086\b\u00a2\u0006\u0003\u0010\u00c8\u0001\u001a#\u0010\u00c9\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\b\b\ufffd\ufffd\u0010\u0002*\u00020Z*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u0003\u001a#\u0010\u00c9\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\b\b\ufffd\ufffd\u0010\u0002*\u00020Z*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020+\u001a\u001d\u0010\u00ca\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001c\u0010\u00cb\u0001\u001a\u0002H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0002\u0010d\u001a3\u0010\u00cb\u0001\u001a\u0002H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010`\u001a\u001c\u0010\u00cb\u0001\u001a\u0002H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+\u00a2\u0006\u0002\u0010/\u001a\u001e\u0010\u00cc\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0002\u0010d\u001a5\u0010\u00cc\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010`\u001a\u001e\u0010\u00cc\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+\u00a2\u0006\u0002\u0010/\u001a,\u0010\u00cd\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\r\u0010\u00ce\u0001\u001a\b\u0012\u0004\u0012\u00020$0\u0003\u001a'\u0010\u00cd\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\b\u0010\u00ce\u0001\u001a\u00030\u00cf\u0001\u001aC\u0010\u00d0\u0001\u001a\u00020u\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u00a1\u0001*\b\u0012\u0004\u0012\u0002H\u00020|2\u0016\b\u0004\u0010<\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b\u001aC\u0010\u00d1\u0001\u001a\u00020u\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u00a1\u0001*\b\u0012\u0004\u0012\u0002H\u00020|2\u0016\b\u0004\u0010<\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b\u001a\"\u0010\u00d2\u0001\u001a\u00020u\"\u000f\b\ufffd\ufffd\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u00a1\u0001*\b\u0012\u0004\u0012\u0002H\u00020|\u001a(\u0010\u00d3\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u000f\b\ufffd\ufffd\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u00a1\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aI\u0010\u00d4\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u00a1\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0016\b\u0004\u0010<\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b\u001aI\u0010\u00d5\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u00a1\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0016\b\u0004\u0010<\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b\u001a(\u0010\u00d6\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u000f\b\ufffd\ufffd\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u00a1\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a<\u0010\u00d7\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u00a7\u0001\u001a\u0018\u0012\u0006\b\ufffd\ufffd\u0012\u0002H\u00020\u00a8\u0001j\u000b\u0012\u0006\b\ufffd\ufffd\u0012\u0002H\u0002`\u00a9\u0001\u001a0\u0010\u00d8\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00020\u0085\u0001\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0086\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0004\u001a\u0019\u0010\u00d9\u0001\u001a\u00020$*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007\u00a2\u0006\u0003\b\u00da\u0001\u001a\u0019\u0010\u00d9\u0001\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007\u00a2\u0006\u0003\b\u00db\u0001\u001a\u0019\u0010\u00d9\u0001\u001a\u00020\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007\u00a2\u0006\u0003\b\u00dc\u0001\u001a\u0019\u0010\u00d9\u0001\u001a\u00020$*\b\u0012\u0004\u0012\u00020$0\u0003H\u0007\u00a2\u0006\u0003\b\u00dd\u0001\u001a\u0019\u0010\u00d9\u0001\u001a\u00020&*\b\u0012\u0004\u0012\u00020&0\u0003H\u0007\u00a2\u0006\u0003\b\u00de\u0001\u001a\u0019\u0010\u00d9\u0001\u001a\u00020$*\b\u0012\u0004\u0012\u00020(0\u0003H\u0007\u00a2\u0006\u0003\b\u00df\u0001\u001a.\u0010\u00e0\u0001\u001a\u00020$\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020$0\u0005H\u0086\b\u001a.\u0010\u00e1\u0001\u001a\u00020\u001e\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u001e0\u0005H\u0086\b\u001a%\u0010\u00e2\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010>\u001a\u00020$\u001a%\u0010\u00e3\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010>\u001a\u00020$\u001a4\u0010\u00e4\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a4\u0010\u00e5\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\u0012\u0010\u00e6\u0001\u001a\u00030\u00e7\u0001*\b\u0012\u0004\u0012\u00020\u000109\u001a\u0012\u0010\u00e8\u0001\u001a\u00030\u00e9\u0001*\b\u0012\u0004\u0012\u00020\u001f09\u001a\u0013\u0010\u00ea\u0001\u001a\u00030\u00eb\u0001*\t\u0012\u0005\u0012\u00030\u00ec\u000109\u001a6\u0010\u00ed\u0001\u001a\u0002HQ\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u0010\b\u0001\u0010Q*\n\u0012\u0006\b\ufffd\ufffd\u0012\u0002H\u00020R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ\u00a2\u0006\u0002\u0010W\u001a\u0012\u0010\u00ee\u0001\u001a\u00030\u00ef\u0001*\b\u0012\u0004\u0012\u00020\u001e09\u001a\u0012\u0010\u00f0\u0001\u001a\u00030\u00f1\u0001*\b\u0012\u0004\u0012\u00020\"09\u001a)\u0010\u00f2\u0001\u001a\u0014\u0012\u0004\u0012\u0002H\u00020\u00f3\u0001j\t\u0012\u0004\u0012\u0002H\u0002`\u00f4\u0001\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u0012\u0010\u00f5\u0001\u001a\u00030\u00f6\u0001*\b\u0012\u0004\u0012\u00020$09\u001a\u001d\u0010\u00f7\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u0012\u0010\u00f8\u0001\u001a\u00030\u00f9\u0001*\b\u0012\u0004\u0012\u00020&09\u001a\u001d\u0010\u00fa\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020|\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u000209\u001a\u001d\u0010\u00fa\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020|\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001e\u0010\u00fb\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00020\u00fc\u0001\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001e\u0010\u00fd\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00020\u0085\u0001\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u0012\u0010\u00fe\u0001\u001a\u00030\u00ff\u0001*\b\u0012\u0004\u0012\u00020(09\u001a0\u0010\u0080\u0002\u001a\t\u0012\u0004\u0012\u0002H\u00020\u0085\u0001\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0086\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0004\u001aC\u0010\u0081\u0002\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$2\t\b\u0002\u0010\u0082\u0002\u001a\u00020$2\t\b\u0002\u0010\u0083\u0002\u001a\u00020\u0001H\u0007\u001a]\u0010\u0081\u0002\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$2\t\b\u0002\u0010\u0082\u0002\u001a\u00020$2\t\b\u0002\u0010\u0083\u0002\u001a\u00020\u00012\u0018\u0010\u000e\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+\u0012\u0004\u0012\u0002H-0\u0005H\u0007\u001a$\u0010\u0084\u0002\u001a\u000f\u0012\u000b\u0012\t\u0012\u0004\u0012\u0002H\u00020\u0085\u00020\u0003\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aJ\u0010\u0086\u0002\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u000f0+\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010\u0086\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H-0\u00b1\u0001H\u0086\u0004\u00a2\u0006\u0003\u0010\u00b2\u0001\u001a~\u0010\u0086\u0002\u001a\b\u0012\u0004\u0012\u0002H\r0+\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010\u0086\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H-0\u00b1\u000128\u0010\u000e\u001a4\u0012\u0014\u0012\u0012H\u0002\u00a2\u0006\r\bN\u0012\t\bO\u0012\u0005\b\b(\u0087\u0002\u0012\u0014\u0012\u0012H-\u00a2\u0006\r\bN\u0012\t\bO\u0012\u0005\b\b(\u0088\u0002\u0012\u0004\u0012\u0002H\r0MH\u0086\b\u00a2\u0006\u0003\u0010\u0089\u0002\u001aA\u0010\u0086\u0002\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u000f0+\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0086\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003H\u0086\u0004\u001au\u0010\u0086\u0002\u001a\b\u0012\u0004\u0012\u0002H\r0+\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0086\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u000328\u0010\u000e\u001a4\u0012\u0014\u0012\u0012H\u0002\u00a2\u0006\r\bN\u0012\t\bO\u0012\u0005\b\b(\u0087\u0002\u0012\u0014\u0012\u0012H-\u00a2\u0006\r\bN\u0012\t\bO\u0012\u0005\b\b(\u0088\u0002\u0012\u0004\u0012\u0002H\r0MH\u0086\b\u001a+\u0010\u008a\u0002\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\u00020\u000f0+\"\u0004\b\ufffd\ufffd\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0007\u001a`\u0010\u008a\u0002\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\ufffd\ufffd\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u000328\u0010\u000e\u001a4\u0012\u0014\u0012\u0012H\u0002\u00a2\u0006\r\bN\u0012\t\bO\u0012\u0005\b\b(\u0087\u0002\u0012\u0014\u0012\u0012H\u0002\u00a2\u0006\r\bN\u0012\t\bO\u0012\u0005\b\b(\u0088\u0002\u0012\u0004\u0012\u0002H-0MH\u0087\b\u00a8\u0006\u008b\u0002"}, m27d2 = {"all", "", "T", "", "predicate", "Lkotlin/Function1;", "any", "asIterable", "asSequence", "Lkotlin/sequences/Sequence;", "associate", "", "K", "V", "transform", "Lkotlin/Pair;", "associateBy", "keySelector", "valueTransform", "associateByTo", "M", "", "destination", "(Ljava/lang/Iterable;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "(Ljava/lang/Iterable;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "associateTo", "associateWith", "valueSelector", "associateWithTo", "average", "", "", "averageOfByte", "averageOfDouble", "", "averageOfFloat", "", "averageOfInt", "", "averageOfLong", "", "averageOfShort", "chunked", "", "size", "R", "component1", "(Ljava/util/List;)Ljava/lang/Object;", "component2", "component3", "component4", "component5", "contains", "Lkotlin/internal/OnlyInputTypes;", "element", "(Ljava/lang/Iterable;Ljava/lang/Object;)Z", "count", "", "distinct", "distinctBy", "selector", "drop", "n", "dropLast", "dropLastWhile", "dropWhile", "elementAt", "index", "(Ljava/lang/Iterable;I)Ljava/lang/Object;", "(Ljava/util/List;I)Ljava/lang/Object;", "elementAtOrElse", "defaultValue", "(Ljava/lang/Iterable;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "(Ljava/util/List;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "elementAtOrNull", "filter", "filterIndexed", "Lkotlin/Function2;", "Lkotlin/ParameterName;", "name", "filterIndexedTo", "C", "", "(Ljava/lang/Iterable;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "filterIsInstance", "Lkotlin/internal/NoInfer;", "filterIsInstanceTo", "(Ljava/lang/Iterable;Ljava/util/Collection;)Ljava/util/Collection;", "filterNot", "filterNotNull", "", "filterNotNullTo", "filterNotTo", "(Ljava/lang/Iterable;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "filterTo", "find", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "findLast", "(Ljava/util/List;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "first", "(Ljava/lang/Iterable;)Ljava/lang/Object;", "firstOrNull", "flatMap", "flatMapTo", "fold", "initial", "operation", "acc", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldIndexed", "Lkotlin/Function3;", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "foldRight", "(Ljava/util/List;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldRightIndexed", "(Ljava/util/List;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "forEach", "", "action", "forEachIndexed", "getOrElse", "getOrNull", "groupBy", "groupByTo", "", "groupingBy", "Lkotlin/collections/Grouping;", "indexOf", "(Ljava/lang/Iterable;Ljava/lang/Object;)I", "(Ljava/util/List;Ljava/lang/Object;)I", "indexOfFirst", "indexOfLast", "intersect", "", "other", "joinTo", "A", "Ljava/lang/Appendable;", "Lkotlin/text/Appendable;", "buffer", "separator", "", "prefix", "postfix", "limit", "truncated", "(Ljava/lang/Iterable;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "joinToString", "", "last", "lastIndexOf", "lastOrNull", "map", "mapIndexed", "mapIndexedNotNull", "mapIndexedNotNullTo", "mapIndexedTo", "mapNotNull", "mapNotNullTo", "mapTo", "max", "", "(Ljava/lang/Iterable;)Ljava/lang/Comparable;", "(Ljava/lang/Iterable;)Ljava/lang/Double;", "(Ljava/lang/Iterable;)Ljava/lang/Float;", "maxBy", "maxWith", "comparator", "Ljava/util/Comparator;", "Lkotlin/Comparator;", "(Ljava/lang/Iterable;Ljava/util/Comparator;)Ljava/lang/Object;", "min", "minBy", "minWith", "minus", "(Ljava/lang/Iterable;Ljava/lang/Object;)Ljava/util/List;", "elements", "", "(Ljava/lang/Iterable;[Ljava/lang/Object;)Ljava/util/List;", "minusElement", "none", "onEach", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Iterable;", "partition", "plus", "(Ljava/util/Collection;Ljava/lang/Object;)Ljava/util/List;", "(Ljava/util/Collection;[Ljava/lang/Object;)Ljava/util/List;", "plusElement", "random", "(Ljava/util/Collection;)Ljava/lang/Object;", "Lkotlin/random/Random;", "(Ljava/util/Collection;Lkotlin/random/Random;)Ljava/lang/Object;", "reduce", "S", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceIndexed", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "reduceRight", "(Ljava/util/List;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceRightIndexed", "(Ljava/util/List;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "requireNoNulls", "reversed", "single", "singleOrNull", "slice", "indices", "Lkotlin/ranges/IntRange;", "sortBy", "sortByDescending", "sortDescending", "sorted", "sortedBy", "sortedByDescending", "sortedDescending", "sortedWith", "subtract", "sum", "sumOfByte", "sumOfDouble", "sumOfFloat", "sumOfInt", "sumOfLong", "sumOfShort", "sumBy", "sumByDouble", "take", "takeLast", "takeLastWhile", "takeWhile", "toBooleanArray", "", "toByteArray", "", "toCharArray", "", "", "toCollection", "toDoubleArray", "", "toFloatArray", "", "toHashSet", "Ljava/util/HashSet;", "Lkotlin/collections/HashSet;", "toIntArray", "", "toList", "toLongArray", "", "toMutableList", "toMutableSet", "", "toSet", "toShortArray", "", "union", "windowed", "step", "partialWindows", "withIndex", "Lkotlin/collections/IndexedValue;", "zip", "a", "b", "(Ljava/lang/Iterable;[Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "zipWithNext", "kotlin-stdlib"}, m28xs = "kotlin/collections/CollectionsKt")
/* loaded from: L-out.jar:kotlin/collections/CollectionsKt___CollectionsKt.class */
class CollectionsKt___CollectionsKt extends CollectionsKt___CollectionsJvmKt {
    @InlineOnly
    private static final <T> T component1(@NotNull List<? extends T> component1) {
        Intrinsics.checkParameterIsNotNull(component1, "$this$component1");
        return component1.get(0);
    }

    @InlineOnly
    private static final <T> T component2(@NotNull List<? extends T> component2) {
        Intrinsics.checkParameterIsNotNull(component2, "$this$component2");
        return component2.get(1);
    }

    @InlineOnly
    private static final <T> T component3(@NotNull List<? extends T> component3) {
        Intrinsics.checkParameterIsNotNull(component3, "$this$component3");
        return component3.get(2);
    }

    @InlineOnly
    private static final <T> T component4(@NotNull List<? extends T> component4) {
        Intrinsics.checkParameterIsNotNull(component4, "$this$component4");
        return component4.get(3);
    }

    @InlineOnly
    private static final <T> T component5(@NotNull List<? extends T> component5) {
        Intrinsics.checkParameterIsNotNull(component5, "$this$component5");
        return component5.get(4);
    }

    public static final <T> boolean contains(@NotNull Iterable<? extends T> contains, T t) {
        Intrinsics.checkParameterIsNotNull(contains, "$this$contains");
        if (contains instanceof Collection) {
            return ((Collection) contains).contains(t);
        }
        return CollectionsKt.indexOf(contains, t) >= 0;
    }

    public static final <T> T elementAt(@NotNull Iterable<? extends T> elementAt, int i) {
        Intrinsics.checkParameterIsNotNull(elementAt, "$this$elementAt");
        if (elementAt instanceof List) {
            return (T) ((List) elementAt).get(i);
        }
        return (T) CollectionsKt.elementAtOrElse(elementAt, i, new Function1(i) { // from class: kotlin.collections.CollectionsKt___CollectionsKt.elementAt.1
            final int $index;

            @Override // kotlin.jvm.functions.Function1
            public Object invoke(Object obj) {
                return invoke(((Number) obj).intValue());
            }

            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            {
                super(1);
                this.$index = i;
            }

            @NotNull
            public final Void invoke(int i2) {
                throw new IndexOutOfBoundsException("Collection doesn't contain element at index " + this.$index + '.');
            }
        });
    }

    @InlineOnly
    private static final <T> T elementAt(@NotNull List<? extends T> list, int index) {
        return list.get(index);
    }

    public static final <T> T elementAtOrElse(@NotNull Iterable<? extends T> elementAtOrElse, int i, @NotNull Function1<? super Integer, ? extends T> defaultValue) {
        Intrinsics.checkParameterIsNotNull(elementAtOrElse, "$this$elementAtOrElse");
        Intrinsics.checkParameterIsNotNull(defaultValue, "defaultValue");
        if (elementAtOrElse instanceof List) {
            List list = (List) elementAtOrElse;
            return (i < 0 || i > CollectionsKt.getLastIndex(list)) ? (T) defaultValue.invoke(Integer.valueOf(i)) : (T) list.get(i);
        }
        if (i < 0) {
            return (T) defaultValue.invoke(Integer.valueOf(i));
        }
        int i2 = 0;
        for (T t : elementAtOrElse) {
            int i3 = i2;
            i2++;
            if (i == i3) {
                return t;
            }
        }
        return (T) defaultValue.invoke(Integer.valueOf(i));
    }

    @InlineOnly
    private static final <T> T elementAtOrElse(@NotNull List<? extends T> list, int i, Function1<? super Integer, ? extends T> function1) {
        return (i < 0 || i > CollectionsKt.getLastIndex(list)) ? (T) function1.invoke(Integer.valueOf(i)) : list.get(i);
    }

    @Nullable
    public static final <T> T elementAtOrNull(@NotNull Iterable<? extends T> elementAtOrNull, int i) {
        Intrinsics.checkParameterIsNotNull(elementAtOrNull, "$this$elementAtOrNull");
        if (elementAtOrNull instanceof List) {
            return (T) CollectionsKt.getOrNull((List) elementAtOrNull, i);
        }
        if (i < 0) {
            return null;
        }
        int i2 = 0;
        for (T t : elementAtOrNull) {
            int i3 = i2;
            i2++;
            if (i == i3) {
                return t;
            }
        }
        return null;
    }

    @InlineOnly
    private static final <T> T elementAtOrNull(@NotNull List<? extends T> list, int i) {
        return (T) CollectionsKt.getOrNull(list, i);
    }

    @InlineOnly
    private static final <T> T find(@NotNull Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        for (T t : iterable) {
            if (((Boolean) function1.invoke(t)).booleanValue()) {
                return t;
            }
        }
        return null;
    }

    @InlineOnly
    private static final <T> T findLast(@NotNull Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        T t = null;
        for (T t2 : iterable) {
            if (((Boolean) function1.invoke(t2)).booleanValue()) {
                t = t2;
            }
        }
        return t;
    }

    @InlineOnly
    private static final <T> T findLast(@NotNull List<? extends T> list, Function1<? super T, Boolean> function1) {
        ListIterator iterator$iv = list.listIterator(list.size());
        while (iterator$iv.hasPrevious()) {
            T tPrevious = iterator$iv.previous();
            if (((Boolean) function1.invoke(tPrevious)).booleanValue()) {
                return tPrevious;
            }
        }
        return null;
    }

    public static final <T> T first(@NotNull Iterable<? extends T> first) {
        Intrinsics.checkParameterIsNotNull(first, "$this$first");
        if (first instanceof List) {
            return (T) CollectionsKt.first((List) first);
        }
        Iterator<? extends T> it = first.iterator();
        if (!it.hasNext()) {
            throw new NoSuchElementException("Collection is empty.");
        }
        return it.next();
    }

    public static final <T> T first(@NotNull List<? extends T> first) {
        Intrinsics.checkParameterIsNotNull(first, "$this$first");
        if (first.isEmpty()) {
            throw new NoSuchElementException("List is empty.");
        }
        return first.get(0);
    }

    public static final <T> T first(@NotNull Iterable<? extends T> first, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(first, "$this$first");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        for (T t : first) {
            if (((Boolean) predicate.invoke(t)).booleanValue()) {
                return t;
            }
        }
        throw new NoSuchElementException("Collection contains no element matching the predicate.");
    }

    @Nullable
    public static final <T> T firstOrNull(@NotNull Iterable<? extends T> firstOrNull) {
        Intrinsics.checkParameterIsNotNull(firstOrNull, "$this$firstOrNull");
        if (firstOrNull instanceof List) {
            if (((List) firstOrNull).isEmpty()) {
                return null;
            }
            return (T) ((List) firstOrNull).get(0);
        }
        Iterator<? extends T> it = firstOrNull.iterator();
        if (!it.hasNext()) {
            return null;
        }
        return it.next();
    }

    @Nullable
    public static final <T> T firstOrNull(@NotNull List<? extends T> firstOrNull) {
        Intrinsics.checkParameterIsNotNull(firstOrNull, "$this$firstOrNull");
        if (firstOrNull.isEmpty()) {
            return null;
        }
        return firstOrNull.get(0);
    }

    @Nullable
    public static final <T> T firstOrNull(@NotNull Iterable<? extends T> firstOrNull, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(firstOrNull, "$this$firstOrNull");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        for (T t : firstOrNull) {
            if (((Boolean) predicate.invoke(t)).booleanValue()) {
                return t;
            }
        }
        return null;
    }

    @InlineOnly
    private static final <T> T getOrElse(@NotNull List<? extends T> list, int i, Function1<? super Integer, ? extends T> function1) {
        return (i < 0 || i > CollectionsKt.getLastIndex(list)) ? (T) function1.invoke(Integer.valueOf(i)) : list.get(i);
    }

    @Nullable
    public static final <T> T getOrNull(@NotNull List<? extends T> getOrNull, int index) {
        Intrinsics.checkParameterIsNotNull(getOrNull, "$this$getOrNull");
        if (index < 0 || index > CollectionsKt.getLastIndex(getOrNull)) {
            return null;
        }
        return getOrNull.get(index);
    }

    public static final <T> int indexOf(@NotNull Iterable<? extends T> indexOf, T t) {
        Intrinsics.checkParameterIsNotNull(indexOf, "$this$indexOf");
        if (indexOf instanceof List) {
            return ((List) indexOf).indexOf(t);
        }
        int index = 0;
        for (Object item : indexOf) {
            if (index < 0) {
                CollectionsKt.throwIndexOverflow();
            }
            if (Intrinsics.areEqual(t, item)) {
                return index;
            }
            index++;
        }
        return -1;
    }

    public static final <T> int indexOf(@NotNull List<? extends T> indexOf, T t) {
        Intrinsics.checkParameterIsNotNull(indexOf, "$this$indexOf");
        return indexOf.indexOf(t);
    }

    public static final <T> int indexOfFirst(@NotNull Iterable<? extends T> indexOfFirst, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(indexOfFirst, "$this$indexOfFirst");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        int index = 0;
        for (Object item : indexOfFirst) {
            if (index < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            if (((Boolean) predicate.invoke(item)).booleanValue()) {
                return index;
            }
            index++;
        }
        return -1;
    }

    public static final <T> int indexOfFirst(@NotNull List<? extends T> indexOfFirst, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(indexOfFirst, "$this$indexOfFirst");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        int index = 0;
        for (Object item : indexOfFirst) {
            if (((Boolean) predicate.invoke(item)).booleanValue()) {
                return index;
            }
            index++;
        }
        return -1;
    }

    public static final <T> int indexOfLast(@NotNull Iterable<? extends T> indexOfLast, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(indexOfLast, "$this$indexOfLast");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        int lastIndex = -1;
        int index = 0;
        for (Object item : indexOfLast) {
            if (index < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            if (((Boolean) predicate.invoke(item)).booleanValue()) {
                lastIndex = index;
            }
            index++;
        }
        return lastIndex;
    }

    public static final <T> int indexOfLast(@NotNull List<? extends T> indexOfLast, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(indexOfLast, "$this$indexOfLast");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        ListIterator iterator = indexOfLast.listIterator(indexOfLast.size());
        while (iterator.hasPrevious()) {
            if (((Boolean) predicate.invoke(iterator.previous())).booleanValue()) {
                return iterator.nextIndex();
            }
        }
        return -1;
    }

    public static final <T> T last(@NotNull Iterable<? extends T> last) {
        Intrinsics.checkParameterIsNotNull(last, "$this$last");
        if (last instanceof List) {
            return (T) CollectionsKt.last((List) last);
        }
        Iterator<? extends T> it = last.iterator();
        if (!it.hasNext()) {
            throw new NoSuchElementException("Collection is empty.");
        }
        T next = it.next();
        while (true) {
            T t = next;
            if (it.hasNext()) {
                next = it.next();
            } else {
                return t;
            }
        }
    }

    public static final <T> T last(@NotNull List<? extends T> last) {
        Intrinsics.checkParameterIsNotNull(last, "$this$last");
        if (last.isEmpty()) {
            throw new NoSuchElementException("List is empty.");
        }
        return last.get(CollectionsKt.getLastIndex(last));
    }

    public static final <T> T last(@NotNull Iterable<? extends T> last, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(last, "$this$last");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        T t = null;
        boolean found = false;
        for (T t2 : last) {
            if (((Boolean) predicate.invoke(t2)).booleanValue()) {
                t = t2;
                found = true;
            }
        }
        if (found) {
            return t;
        }
        throw new NoSuchElementException("Collection contains no element matching the predicate.");
    }

    public static final <T> T last(@NotNull List<? extends T> last, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(last, "$this$last");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        ListIterator iterator = last.listIterator(last.size());
        while (iterator.hasPrevious()) {
            T tPrevious = iterator.previous();
            if (((Boolean) predicate.invoke(tPrevious)).booleanValue()) {
                return tPrevious;
            }
        }
        throw new NoSuchElementException("List contains no element matching the predicate.");
    }

    public static final <T> int lastIndexOf(@NotNull Iterable<? extends T> lastIndexOf, T t) {
        Intrinsics.checkParameterIsNotNull(lastIndexOf, "$this$lastIndexOf");
        if (lastIndexOf instanceof List) {
            return ((List) lastIndexOf).lastIndexOf(t);
        }
        int lastIndex = -1;
        int index = 0;
        for (Object item : lastIndexOf) {
            if (index < 0) {
                CollectionsKt.throwIndexOverflow();
            }
            if (Intrinsics.areEqual(t, item)) {
                lastIndex = index;
            }
            index++;
        }
        return lastIndex;
    }

    public static final <T> int lastIndexOf(@NotNull List<? extends T> lastIndexOf, T t) {
        Intrinsics.checkParameterIsNotNull(lastIndexOf, "$this$lastIndexOf");
        return lastIndexOf.lastIndexOf(t);
    }

    @Nullable
    public static final <T> T lastOrNull(@NotNull Iterable<? extends T> lastOrNull) {
        Intrinsics.checkParameterIsNotNull(lastOrNull, "$this$lastOrNull");
        if (lastOrNull instanceof List) {
            if (((List) lastOrNull).isEmpty()) {
                return null;
            }
            return (T) ((List) lastOrNull).get(((List) lastOrNull).size() - 1);
        }
        Iterator<? extends T> it = lastOrNull.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        while (true) {
            T t = next;
            if (it.hasNext()) {
                next = it.next();
            } else {
                return t;
            }
        }
    }

    @Nullable
    public static final <T> T lastOrNull(@NotNull List<? extends T> lastOrNull) {
        Intrinsics.checkParameterIsNotNull(lastOrNull, "$this$lastOrNull");
        if (lastOrNull.isEmpty()) {
            return null;
        }
        return lastOrNull.get(lastOrNull.size() - 1);
    }

    @Nullable
    public static final <T> T lastOrNull(@NotNull Iterable<? extends T> lastOrNull, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(lastOrNull, "$this$lastOrNull");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        T t = null;
        for (T t2 : lastOrNull) {
            if (((Boolean) predicate.invoke(t2)).booleanValue()) {
                t = t2;
            }
        }
        return t;
    }

    @Nullable
    public static final <T> T lastOrNull(@NotNull List<? extends T> lastOrNull, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(lastOrNull, "$this$lastOrNull");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        ListIterator iterator = lastOrNull.listIterator(lastOrNull.size());
        while (iterator.hasPrevious()) {
            T tPrevious = iterator.previous();
            if (((Boolean) predicate.invoke(tPrevious)).booleanValue()) {
                return tPrevious;
            }
        }
        return null;
    }

    @SinceKotlin(version = "1.3")
    @InlineOnly
    private static final <T> T random(@NotNull Collection<? extends T> collection) {
        return (T) CollectionsKt.random(collection, Random.Default);
    }

    @SinceKotlin(version = "1.3")
    public static final <T> T random(@NotNull Collection<? extends T> random, @NotNull Random random2) {
        Intrinsics.checkParameterIsNotNull(random, "$this$random");
        Intrinsics.checkParameterIsNotNull(random2, "random");
        if (random.isEmpty()) {
            throw new NoSuchElementException("Collection is empty.");
        }
        return (T) CollectionsKt.elementAt(random, random2.nextInt(random.size()));
    }

    public static final <T> T single(@NotNull Iterable<? extends T> single) {
        Intrinsics.checkParameterIsNotNull(single, "$this$single");
        if (single instanceof List) {
            return (T) CollectionsKt.single((List) single);
        }
        Iterator<? extends T> it = single.iterator();
        if (!it.hasNext()) {
            throw new NoSuchElementException("Collection is empty.");
        }
        T next = it.next();
        if (it.hasNext()) {
            throw new IllegalArgumentException("Collection has more than one element.");
        }
        return next;
    }

    public static final <T> T single(@NotNull List<? extends T> single) {
        Intrinsics.checkParameterIsNotNull(single, "$this$single");
        switch (single.size()) {
            case 0:
                throw new NoSuchElementException("List is empty.");
            case 1:
                return single.get(0);
            default:
                throw new IllegalArgumentException("List has more than one element.");
        }
    }

    public static final <T> T single(@NotNull Iterable<? extends T> single, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(single, "$this$single");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        T t = null;
        boolean found = false;
        for (T t2 : single) {
            if (((Boolean) predicate.invoke(t2)).booleanValue()) {
                if (found) {
                    throw new IllegalArgumentException("Collection contains more than one matching element.");
                }
                t = t2;
                found = true;
            }
        }
        if (found) {
            return t;
        }
        throw new NoSuchElementException("Collection contains no element matching the predicate.");
    }

    @Nullable
    public static final <T> T singleOrNull(@NotNull Iterable<? extends T> singleOrNull) {
        Intrinsics.checkParameterIsNotNull(singleOrNull, "$this$singleOrNull");
        if (singleOrNull instanceof List) {
            if (((List) singleOrNull).size() == 1) {
                return (T) ((List) singleOrNull).get(0);
            }
            return null;
        }
        Iterator<? extends T> it = singleOrNull.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        if (it.hasNext()) {
            return null;
        }
        return next;
    }

    @Nullable
    public static final <T> T singleOrNull(@NotNull List<? extends T> singleOrNull) {
        Intrinsics.checkParameterIsNotNull(singleOrNull, "$this$singleOrNull");
        if (singleOrNull.size() == 1) {
            return singleOrNull.get(0);
        }
        return null;
    }

    @Nullable
    public static final <T> T singleOrNull(@NotNull Iterable<? extends T> singleOrNull, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(singleOrNull, "$this$singleOrNull");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        T t = null;
        boolean found = false;
        for (T t2 : singleOrNull) {
            if (((Boolean) predicate.invoke(t2)).booleanValue()) {
                if (found) {
                    return null;
                }
                t = t2;
                found = true;
            }
        }
        if (found) {
            return t;
        }
        return null;
    }

    @NotNull
    public static final <T> List<T> drop(@NotNull Iterable<? extends T> drop, int n) {
        ArrayList list;
        Intrinsics.checkParameterIsNotNull(drop, "$this$drop");
        if (!(n >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + n + " is less than zero.").toString());
        }
        if (n == 0) {
            return CollectionsKt.toList(drop);
        }
        if (drop instanceof Collection) {
            int resultSize = ((Collection) drop).size() - n;
            if (resultSize <= 0) {
                return CollectionsKt.emptyList();
            }
            if (resultSize == 1) {
                return CollectionsKt.listOf(CollectionsKt.last(drop));
            }
            list = new ArrayList(resultSize);
            if (drop instanceof List) {
                if (drop instanceof RandomAccess) {
                    int size = ((Collection) drop).size();
                    for (int index = n; index < size; index++) {
                        list.add(((List) drop).get(index));
                    }
                } else {
                    ListIterator listIterator = ((List) drop).listIterator(n);
                    while (listIterator.hasNext()) {
                        Object item = listIterator.next();
                        list.add(item);
                    }
                }
                return list;
            }
        } else {
            list = new ArrayList();
        }
        int count = 0;
        for (T t : drop) {
            if (count >= n) {
                list.add(t);
            } else {
                count++;
            }
        }
        return CollectionsKt.optimizeReadOnlyList(list);
    }

    @NotNull
    public static final <T> List<T> dropLast(@NotNull List<? extends T> dropLast, int n) {
        Intrinsics.checkParameterIsNotNull(dropLast, "$this$dropLast");
        if (!(n >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + n + " is less than zero.").toString());
        }
        return CollectionsKt.take(dropLast, RangesKt.coerceAtLeast(dropLast.size() - n, 0));
    }

    @NotNull
    public static final <T> List<T> dropLastWhile(@NotNull List<? extends T> dropLastWhile, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(dropLastWhile, "$this$dropLastWhile");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        if (!dropLastWhile.isEmpty()) {
            ListIterator iterator = dropLastWhile.listIterator(dropLastWhile.size());
            while (iterator.hasPrevious()) {
                if (!((Boolean) predicate.invoke(iterator.previous())).booleanValue()) {
                    return CollectionsKt.take(dropLastWhile, iterator.nextIndex() + 1);
                }
            }
        }
        return CollectionsKt.emptyList();
    }

    @NotNull
    public static final <T> List<T> dropWhile(@NotNull Iterable<? extends T> dropWhile, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(dropWhile, "$this$dropWhile");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        boolean yielding = false;
        ArrayList list = new ArrayList();
        for (T t : dropWhile) {
            if (yielding) {
                list.add(t);
            } else if (!((Boolean) predicate.invoke(t)).booleanValue()) {
                list.add(t);
                yielding = true;
            }
        }
        return list;
    }

    @NotNull
    public static final <T> List<T> filter(@NotNull Iterable<? extends T> filter, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(filter, "$this$filter");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        Collection destination$iv = new ArrayList();
        for (T t : filter) {
            if (((Boolean) predicate.invoke(t)).booleanValue()) {
                destination$iv.add(t);
            }
        }
        return (List) destination$iv;
    }

    @NotNull
    public static final <T> List<T> filterIndexed(@NotNull Iterable<? extends T> filterIndexed, @NotNull Function2<? super Integer, ? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(filterIndexed, "$this$filterIndexed");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        Collection destination$iv = new ArrayList();
        int index$iv$iv = 0;
        for (T t : filterIndexed) {
            int index$iv = index$iv$iv;
            index$iv$iv++;
            if (index$iv < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            if (((Boolean) predicate.invoke(Integer.valueOf(index$iv), t)).booleanValue()) {
                destination$iv.add(t);
            }
        }
        return (List) destination$iv;
    }

    @NotNull
    public static final <T, C extends Collection<? super T>> C filterIndexedTo(@NotNull Iterable<? extends T> filterIndexedTo, @NotNull C destination, @NotNull Function2<? super Integer, ? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(filterIndexedTo, "$this$filterIndexedTo");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        int index$iv = 0;
        for (T t : filterIndexedTo) {
            int index = index$iv;
            index$iv++;
            if (index < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            if (((Boolean) predicate.invoke(Integer.valueOf(index), t)).booleanValue()) {
                destination.add(t);
            }
        }
        return destination;
    }

    @NotNull
    public static final /* synthetic */ <R> List<R> filterIsInstance(@NotNull Iterable<?> filterIsInstance) {
        Intrinsics.checkParameterIsNotNull(filterIsInstance, "$this$filterIsInstance");
        Collection destination$iv = new ArrayList();
        for (Object element$iv : filterIsInstance) {
            Intrinsics.reifiedOperationMarker(3, "R");
            if (element$iv instanceof Object) {
                destination$iv.add(element$iv);
            }
        }
        return (List) destination$iv;
    }

    @NotNull
    public static final /* synthetic */ <R, C extends Collection<? super R>> C filterIsInstanceTo(@NotNull Iterable<?> filterIsInstanceTo, @NotNull C destination) {
        Intrinsics.checkParameterIsNotNull(filterIsInstanceTo, "$this$filterIsInstanceTo");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        for (Object element : filterIsInstanceTo) {
            Intrinsics.reifiedOperationMarker(3, "R");
            if (element instanceof Object) {
                destination.add(element);
            }
        }
        return destination;
    }

    @NotNull
    public static final <T> List<T> filterNot(@NotNull Iterable<? extends T> filterNot, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(filterNot, "$this$filterNot");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        Collection destination$iv = new ArrayList();
        for (T t : filterNot) {
            if (!((Boolean) predicate.invoke(t)).booleanValue()) {
                destination$iv.add(t);
            }
        }
        return (List) destination$iv;
    }

    @NotNull
    public static final <T> List<T> filterNotNull(@NotNull Iterable<? extends T> filterNotNull) {
        Intrinsics.checkParameterIsNotNull(filterNotNull, "$this$filterNotNull");
        return (List) CollectionsKt.filterNotNullTo(filterNotNull, new ArrayList());
    }

    @NotNull
    public static final <C extends Collection<? super T>, T> C filterNotNullTo(@NotNull Iterable<? extends T> filterNotNullTo, @NotNull C destination) {
        Intrinsics.checkParameterIsNotNull(filterNotNullTo, "$this$filterNotNullTo");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        for (T t : filterNotNullTo) {
            if (t != null) {
                destination.add(t);
            }
        }
        return destination;
    }

    @NotNull
    public static final <T, C extends Collection<? super T>> C filterNotTo(@NotNull Iterable<? extends T> filterNotTo, @NotNull C destination, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(filterNotTo, "$this$filterNotTo");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        for (T t : filterNotTo) {
            if (!((Boolean) predicate.invoke(t)).booleanValue()) {
                destination.add(t);
            }
        }
        return destination;
    }

    @NotNull
    public static final <T, C extends Collection<? super T>> C filterTo(@NotNull Iterable<? extends T> filterTo, @NotNull C destination, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(filterTo, "$this$filterTo");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        for (T t : filterTo) {
            if (((Boolean) predicate.invoke(t)).booleanValue()) {
                destination.add(t);
            }
        }
        return destination;
    }

    @NotNull
    public static final <T> List<T> slice(@NotNull List<? extends T> slice, @NotNull IntRange indices) {
        Intrinsics.checkParameterIsNotNull(slice, "$this$slice");
        Intrinsics.checkParameterIsNotNull(indices, "indices");
        return indices.isEmpty() ? CollectionsKt.emptyList() : CollectionsKt.toList(slice.subList(indices.getStart().intValue(), indices.getEndInclusive().intValue() + 1));
    }

    @NotNull
    public static final <T> List<T> slice(@NotNull List<? extends T> slice, @NotNull Iterable<Integer> indices) {
        Intrinsics.checkParameterIsNotNull(slice, "$this$slice");
        Intrinsics.checkParameterIsNotNull(indices, "indices");
        int size = CollectionsKt.collectionSizeOrDefault(indices, 10);
        if (size == 0) {
            return CollectionsKt.emptyList();
        }
        ArrayList list = new ArrayList(size);
        Iterator<Integer> it = indices.iterator();
        while (it.hasNext()) {
            int index = it.next().intValue();
            list.add(slice.get(index));
        }
        return list;
    }

    @NotNull
    public static final <T> List<T> take(@NotNull Iterable<? extends T> take, int n) {
        Intrinsics.checkParameterIsNotNull(take, "$this$take");
        if (!(n >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + n + " is less than zero.").toString());
        }
        if (n == 0) {
            return CollectionsKt.emptyList();
        }
        if (take instanceof Collection) {
            if (n >= ((Collection) take).size()) {
                return CollectionsKt.toList(take);
            }
            if (n == 1) {
                return CollectionsKt.listOf(CollectionsKt.first(take));
            }
        }
        int count = 0;
        ArrayList list = new ArrayList(n);
        Iterator<? extends T> it = take.iterator();
        while (it.hasNext()) {
            list.add(it.next());
            count++;
            if (count == n) {
                break;
            }
        }
        return CollectionsKt.optimizeReadOnlyList(list);
    }

    @NotNull
    public static final <T> List<T> takeLast(@NotNull List<? extends T> takeLast, int n) {
        Intrinsics.checkParameterIsNotNull(takeLast, "$this$takeLast");
        if (!(n >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + n + " is less than zero.").toString());
        }
        if (n == 0) {
            return CollectionsKt.emptyList();
        }
        int size = takeLast.size();
        if (n >= size) {
            return CollectionsKt.toList(takeLast);
        }
        if (n == 1) {
            return CollectionsKt.listOf(CollectionsKt.last((List) takeLast));
        }
        ArrayList list = new ArrayList(n);
        if (takeLast instanceof RandomAccess) {
            for (int index = size - n; index < size; index++) {
                list.add(takeLast.get(index));
            }
        } else {
            ListIterator<? extends T> listIterator = takeLast.listIterator(size - n);
            while (listIterator.hasNext()) {
                list.add(listIterator.next());
            }
        }
        return list;
    }

    @NotNull
    public static final <T> List<T> takeLastWhile(@NotNull List<? extends T> takeLastWhile, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(takeLastWhile, "$this$takeLastWhile");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        if (takeLastWhile.isEmpty()) {
            return CollectionsKt.emptyList();
        }
        ListIterator iterator = takeLastWhile.listIterator(takeLastWhile.size());
        while (iterator.hasPrevious()) {
            if (!((Boolean) predicate.invoke(iterator.previous())).booleanValue()) {
                iterator.next();
                int expectedSize = takeLastWhile.size() - iterator.nextIndex();
                if (expectedSize == 0) {
                    return CollectionsKt.emptyList();
                }
                ArrayList $this$apply = new ArrayList(expectedSize);
                while (iterator.hasNext()) {
                    $this$apply.add(iterator.next());
                }
                return $this$apply;
            }
        }
        return CollectionsKt.toList(takeLastWhile);
    }

    @NotNull
    public static final <T> List<T> takeWhile(@NotNull Iterable<? extends T> takeWhile, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(takeWhile, "$this$takeWhile");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        ArrayList list = new ArrayList();
        for (T t : takeWhile) {
            if (!((Boolean) predicate.invoke(t)).booleanValue()) {
                break;
            }
            list.add(t);
        }
        return list;
    }

    @NotNull
    public static final <T> List<T> reversed(@NotNull Iterable<? extends T> reversed) {
        Intrinsics.checkParameterIsNotNull(reversed, "$this$reversed");
        if ((reversed instanceof Collection) && ((Collection) reversed).size() <= 1) {
            return CollectionsKt.toList(reversed);
        }
        List list = CollectionsKt.toMutableList(reversed);
        CollectionsKt.reverse(list);
        return list;
    }

    public static final <T, R extends Comparable<? super R>> void sortBy(@NotNull List<T> sortBy, @NotNull Function1<? super T, ? extends R> selector) {
        Intrinsics.checkParameterIsNotNull(sortBy, "$this$sortBy");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        if (sortBy.size() > 1) {
            CollectionsKt.sortWith(sortBy, new ComparisonsKt__ComparisonsKt.C03092(selector));
        }
    }

    public static final <T, R extends Comparable<? super R>> void sortByDescending(@NotNull List<T> sortByDescending, @NotNull Function1<? super T, ? extends R> selector) {
        Intrinsics.checkParameterIsNotNull(sortByDescending, "$this$sortByDescending");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        if (sortByDescending.size() > 1) {
            CollectionsKt.sortWith(sortByDescending, new ComparisonsKt__ComparisonsKt.C03111(selector));
        }
    }

    public static final <T extends Comparable<? super T>> void sortDescending(@NotNull List<T> sortDescending) {
        Intrinsics.checkParameterIsNotNull(sortDescending, "$this$sortDescending");
        CollectionsKt.sortWith(sortDescending, ComparisonsKt.reverseOrder());
    }

    @NotNull
    public static final <T extends Comparable<? super T>> List<T> sorted(@NotNull Iterable<? extends T> sorted) {
        Intrinsics.checkParameterIsNotNull(sorted, "$this$sorted");
        if (!(sorted instanceof Collection)) {
            List $this$apply = CollectionsKt.toMutableList(sorted);
            CollectionsKt.sort($this$apply);
            return $this$apply;
        }
        if (((Collection) sorted).size() <= 1) {
            return CollectionsKt.toList(sorted);
        }
        Collection $this$toTypedArray$iv = (Collection) sorted;
        Object[] array = $this$toTypedArray$iv.toArray(new Comparable[0]);
        if (array == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
        }
        if (array == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
        }
        Comparable[] $this$apply2 = (Comparable[]) array;
        if ($this$apply2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<kotlin.Any?>");
        }
        ArraysKt.sort((Object[]) $this$apply2);
        return ArraysKt.asList($this$apply2);
    }

    @NotNull
    public static final <T, R extends Comparable<? super R>> List<T> sortedBy(@NotNull Iterable<? extends T> sortedBy, @NotNull Function1<? super T, ? extends R> selector) {
        Intrinsics.checkParameterIsNotNull(sortedBy, "$this$sortedBy");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        return CollectionsKt.sortedWith(sortedBy, new ComparisonsKt__ComparisonsKt.C03092(selector));
    }

    @NotNull
    public static final <T, R extends Comparable<? super R>> List<T> sortedByDescending(@NotNull Iterable<? extends T> sortedByDescending, @NotNull Function1<? super T, ? extends R> selector) {
        Intrinsics.checkParameterIsNotNull(sortedByDescending, "$this$sortedByDescending");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        return CollectionsKt.sortedWith(sortedByDescending, new ComparisonsKt__ComparisonsKt.C03111(selector));
    }

    @NotNull
    public static final <T extends Comparable<? super T>> List<T> sortedDescending(@NotNull Iterable<? extends T> sortedDescending) {
        Intrinsics.checkParameterIsNotNull(sortedDescending, "$this$sortedDescending");
        return CollectionsKt.sortedWith(sortedDescending, ComparisonsKt.reverseOrder());
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static final <T> List<T> sortedWith(@NotNull Iterable<? extends T> sortedWith, @NotNull Comparator<? super T> comparator) {
        Intrinsics.checkParameterIsNotNull(sortedWith, "$this$sortedWith");
        Intrinsics.checkParameterIsNotNull(comparator, "comparator");
        if (!(sortedWith instanceof Collection)) {
            List $this$apply = CollectionsKt.toMutableList(sortedWith);
            CollectionsKt.sortWith($this$apply, comparator);
            return $this$apply;
        }
        if (((Collection) sortedWith).size() <= 1) {
            return CollectionsKt.toList(sortedWith);
        }
        Object[] $this$apply2 = ((Collection) sortedWith).toArray(new Object[0]);
        if ($this$apply2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
        }
        if ($this$apply2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
        }
        ArraysKt.sortWith($this$apply2, comparator);
        return ArraysKt.asList($this$apply2);
    }

    @NotNull
    public static final boolean[] toBooleanArray(@NotNull Collection<Boolean> toBooleanArray) {
        Intrinsics.checkParameterIsNotNull(toBooleanArray, "$this$toBooleanArray");
        boolean[] result = new boolean[toBooleanArray.size()];
        int index = 0;
        Iterator<Boolean> it = toBooleanArray.iterator();
        while (it.hasNext()) {
            boolean element = it.next().booleanValue();
            int i = index;
            index++;
            result[i] = element;
        }
        return result;
    }

    @NotNull
    public static final byte[] toByteArray(@NotNull Collection<Byte> toByteArray) {
        Intrinsics.checkParameterIsNotNull(toByteArray, "$this$toByteArray");
        byte[] result = new byte[toByteArray.size()];
        int index = 0;
        Iterator<Byte> it = toByteArray.iterator();
        while (it.hasNext()) {
            byte element = it.next().byteValue();
            int i = index;
            index++;
            result[i] = element;
        }
        return result;
    }

    @NotNull
    public static final char[] toCharArray(@NotNull Collection<Character> toCharArray) {
        Intrinsics.checkParameterIsNotNull(toCharArray, "$this$toCharArray");
        char[] result = new char[toCharArray.size()];
        int index = 0;
        Iterator<Character> it = toCharArray.iterator();
        while (it.hasNext()) {
            char element = it.next().charValue();
            int i = index;
            index++;
            result[i] = element;
        }
        return result;
    }

    @NotNull
    public static final double[] toDoubleArray(@NotNull Collection<Double> toDoubleArray) {
        Intrinsics.checkParameterIsNotNull(toDoubleArray, "$this$toDoubleArray");
        double[] result = new double[toDoubleArray.size()];
        int index = 0;
        Iterator<Double> it = toDoubleArray.iterator();
        while (it.hasNext()) {
            double element = it.next().doubleValue();
            int i = index;
            index++;
            result[i] = element;
        }
        return result;
    }

    @NotNull
    public static final float[] toFloatArray(@NotNull Collection<Float> toFloatArray) {
        Intrinsics.checkParameterIsNotNull(toFloatArray, "$this$toFloatArray");
        float[] result = new float[toFloatArray.size()];
        int index = 0;
        Iterator<Float> it = toFloatArray.iterator();
        while (it.hasNext()) {
            float element = it.next().floatValue();
            int i = index;
            index++;
            result[i] = element;
        }
        return result;
    }

    @NotNull
    public static final int[] toIntArray(@NotNull Collection<Integer> toIntArray) {
        Intrinsics.checkParameterIsNotNull(toIntArray, "$this$toIntArray");
        int[] result = new int[toIntArray.size()];
        int index = 0;
        Iterator<Integer> it = toIntArray.iterator();
        while (it.hasNext()) {
            int element = it.next().intValue();
            int i = index;
            index++;
            result[i] = element;
        }
        return result;
    }

    @NotNull
    public static final long[] toLongArray(@NotNull Collection<Long> toLongArray) {
        Intrinsics.checkParameterIsNotNull(toLongArray, "$this$toLongArray");
        long[] result = new long[toLongArray.size()];
        int index = 0;
        Iterator<Long> it = toLongArray.iterator();
        while (it.hasNext()) {
            long element = it.next().longValue();
            int i = index;
            index++;
            result[i] = element;
        }
        return result;
    }

    @NotNull
    public static final short[] toShortArray(@NotNull Collection<Short> toShortArray) {
        Intrinsics.checkParameterIsNotNull(toShortArray, "$this$toShortArray");
        short[] result = new short[toShortArray.size()];
        int index = 0;
        Iterator<Short> it = toShortArray.iterator();
        while (it.hasNext()) {
            short element = it.next().shortValue();
            int i = index;
            index++;
            result[i] = element;
        }
        return result;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static final <T, K, V> Map<K, V> associate(@NotNull Iterable<? extends T> associate, @NotNull Function1<? super T, ? extends Pair<? extends K, ? extends V>> transform) {
        Intrinsics.checkParameterIsNotNull(associate, "$this$associate");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        LinkedHashMap linkedHashMap = new LinkedHashMap(RangesKt.coerceAtLeast(MapsKt.mapCapacity(CollectionsKt.collectionSizeOrDefault(associate, 10)), 16));
        Iterator<? extends T> it = associate.iterator();
        while (it.hasNext()) {
            Pair pair = (Pair) transform.invoke(it.next());
            linkedHashMap.put(pair.getFirst(), pair.getSecond());
        }
        return linkedHashMap;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static final <T, K> Map<K, T> associateBy(@NotNull Iterable<? extends T> associateBy, @NotNull Function1<? super T, ? extends K> keySelector) {
        Intrinsics.checkParameterIsNotNull(associateBy, "$this$associateBy");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        LinkedHashMap linkedHashMap = new LinkedHashMap(RangesKt.coerceAtLeast(MapsKt.mapCapacity(CollectionsKt.collectionSizeOrDefault(associateBy, 10)), 16));
        for (T t : associateBy) {
            linkedHashMap.put(keySelector.invoke(t), t);
        }
        return linkedHashMap;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static final <T, K, V> Map<K, V> associateBy(@NotNull Iterable<? extends T> associateBy, @NotNull Function1<? super T, ? extends K> keySelector, @NotNull Function1<? super T, ? extends V> valueTransform) {
        Intrinsics.checkParameterIsNotNull(associateBy, "$this$associateBy");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        Intrinsics.checkParameterIsNotNull(valueTransform, "valueTransform");
        LinkedHashMap linkedHashMap = new LinkedHashMap(RangesKt.coerceAtLeast(MapsKt.mapCapacity(CollectionsKt.collectionSizeOrDefault(associateBy, 10)), 16));
        for (T t : associateBy) {
            linkedHashMap.put(keySelector.invoke(t), valueTransform.invoke(t));
        }
        return linkedHashMap;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static final <T, K, M extends Map<? super K, ? super T>> M associateByTo(@NotNull Iterable<? extends T> associateByTo, @NotNull M destination, @NotNull Function1<? super T, ? extends K> keySelector) {
        Intrinsics.checkParameterIsNotNull(associateByTo, "$this$associateByTo");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        for (T t : associateByTo) {
            destination.put(keySelector.invoke(t), t);
        }
        return destination;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static final <T, K, V, M extends Map<? super K, ? super V>> M associateByTo(@NotNull Iterable<? extends T> associateByTo, @NotNull M destination, @NotNull Function1<? super T, ? extends K> keySelector, @NotNull Function1<? super T, ? extends V> valueTransform) {
        Intrinsics.checkParameterIsNotNull(associateByTo, "$this$associateByTo");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        Intrinsics.checkParameterIsNotNull(valueTransform, "valueTransform");
        for (Object element : associateByTo) {
            destination.put(keySelector.invoke(element), valueTransform.invoke(element));
        }
        return destination;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static final <T, K, V, M extends Map<? super K, ? super V>> M associateTo(@NotNull Iterable<? extends T> associateTo, @NotNull M destination, @NotNull Function1<? super T, ? extends Pair<? extends K, ? extends V>> transform) {
        Intrinsics.checkParameterIsNotNull(associateTo, "$this$associateTo");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        for (Object element : associateTo) {
            Pair pair = (Pair) transform.invoke(element);
            destination.put(pair.getFirst(), pair.getSecond());
        }
        return destination;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @SinceKotlin(version = "1.3")
    @NotNull
    public static final <K, V> Map<K, V> associateWith(@NotNull Iterable<? extends K> associateWith, @NotNull Function1<? super K, ? extends V> valueSelector) {
        Intrinsics.checkParameterIsNotNull(associateWith, "$this$associateWith");
        Intrinsics.checkParameterIsNotNull(valueSelector, "valueSelector");
        LinkedHashMap result = new LinkedHashMap(RangesKt.coerceAtLeast(MapsKt.mapCapacity(CollectionsKt.collectionSizeOrDefault(associateWith, 10)), 16));
        for (K k : associateWith) {
            result.put(k, valueSelector.invoke(k));
        }
        return result;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @SinceKotlin(version = "1.3")
    @NotNull
    public static final <K, V, M extends Map<? super K, ? super V>> M associateWithTo(@NotNull Iterable<? extends K> associateWithTo, @NotNull M destination, @NotNull Function1<? super K, ? extends V> valueSelector) {
        Intrinsics.checkParameterIsNotNull(associateWithTo, "$this$associateWithTo");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(valueSelector, "valueSelector");
        for (K k : associateWithTo) {
            destination.put(k, valueSelector.invoke(k));
        }
        return destination;
    }

    @NotNull
    public static final <T, C extends Collection<? super T>> C toCollection(@NotNull Iterable<? extends T> toCollection, @NotNull C destination) {
        Intrinsics.checkParameterIsNotNull(toCollection, "$this$toCollection");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Iterator<? extends T> it = toCollection.iterator();
        while (it.hasNext()) {
            destination.add(it.next());
        }
        return destination;
    }

    @NotNull
    public static final <T> HashSet<T> toHashSet(@NotNull Iterable<? extends T> toHashSet) {
        Intrinsics.checkParameterIsNotNull(toHashSet, "$this$toHashSet");
        return (HashSet) CollectionsKt.toCollection(toHashSet, new HashSet(MapsKt.mapCapacity(CollectionsKt.collectionSizeOrDefault(toHashSet, 12))));
    }

    @NotNull
    public static final <T> List<T> toList(@NotNull Iterable<? extends T> toList) {
        Intrinsics.checkParameterIsNotNull(toList, "$this$toList");
        if (toList instanceof Collection) {
            switch (((Collection) toList).size()) {
                case 0:
                    return CollectionsKt.emptyList();
                case 1:
                    return CollectionsKt.listOf(toList instanceof List ? ((List) toList).get(0) : toList.iterator().next());
                default:
                    return CollectionsKt.toMutableList((Collection) toList);
            }
        }
        return CollectionsKt.optimizeReadOnlyList(CollectionsKt.toMutableList(toList));
    }

    @NotNull
    public static final <T> List<T> toMutableList(@NotNull Iterable<? extends T> toMutableList) {
        Intrinsics.checkParameterIsNotNull(toMutableList, "$this$toMutableList");
        if (toMutableList instanceof Collection) {
            return CollectionsKt.toMutableList((Collection) toMutableList);
        }
        return (List) CollectionsKt.toCollection(toMutableList, new ArrayList());
    }

    @NotNull
    public static final <T> List<T> toMutableList(@NotNull Collection<? extends T> toMutableList) {
        Intrinsics.checkParameterIsNotNull(toMutableList, "$this$toMutableList");
        return new ArrayList(toMutableList);
    }

    @NotNull
    public static final <T> Set<T> toSet(@NotNull Iterable<? extends T> toSet) {
        Intrinsics.checkParameterIsNotNull(toSet, "$this$toSet");
        if (toSet instanceof Collection) {
            switch (((Collection) toSet).size()) {
                case 0:
                    return SetsKt.emptySet();
                case 1:
                    return SetsKt.setOf(toSet instanceof List ? ((List) toSet).get(0) : toSet.iterator().next());
                default:
                    return (Set) CollectionsKt.toCollection(toSet, new LinkedHashSet(MapsKt.mapCapacity(((Collection) toSet).size())));
            }
        }
        return SetsKt.optimizeReadOnlySet((Set) CollectionsKt.toCollection(toSet, new LinkedHashSet()));
    }

    @NotNull
    public static final <T, R> List<R> flatMap(@NotNull Iterable<? extends T> flatMap, @NotNull Function1<? super T, ? extends Iterable<? extends R>> transform) {
        Intrinsics.checkParameterIsNotNull(flatMap, "$this$flatMap");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        Collection destination$iv = new ArrayList();
        for (Object element$iv : flatMap) {
            Iterable list$iv = (Iterable) transform.invoke(element$iv);
            CollectionsKt.addAll(destination$iv, list$iv);
        }
        return (List) destination$iv;
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C flatMapTo(@NotNull Iterable<? extends T> flatMapTo, @NotNull C destination, @NotNull Function1<? super T, ? extends Iterable<? extends R>> transform) {
        Intrinsics.checkParameterIsNotNull(flatMapTo, "$this$flatMapTo");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        for (Object element : flatMapTo) {
            Iterable list = (Iterable) transform.invoke(element);
            CollectionsKt.addAll(destination, list);
        }
        return destination;
    }

    @NotNull
    public static final <T, K> Map<K, List<T>> groupBy(@NotNull Iterable<? extends T> groupBy, @NotNull Function1<? super T, ? extends K> keySelector) {
        Object obj;
        Intrinsics.checkParameterIsNotNull(groupBy, "$this$groupBy");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        for (T t : groupBy) {
            Object objInvoke = keySelector.invoke(t);
            Object obj2 = linkedHashMap.get(objInvoke);
            if (obj2 == null) {
                ArrayList arrayList = new ArrayList();
                linkedHashMap.put(objInvoke, arrayList);
                obj = arrayList;
            } else {
                obj = obj2;
            }
            ((List) obj).add(t);
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <T, K, V> Map<K, List<V>> groupBy(@NotNull Iterable<? extends T> groupBy, @NotNull Function1<? super T, ? extends K> keySelector, @NotNull Function1<? super T, ? extends V> valueTransform) {
        Object obj;
        Intrinsics.checkParameterIsNotNull(groupBy, "$this$groupBy");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        Intrinsics.checkParameterIsNotNull(valueTransform, "valueTransform");
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        for (T t : groupBy) {
            Object objInvoke = keySelector.invoke(t);
            Object obj2 = linkedHashMap.get(objInvoke);
            if (obj2 == null) {
                ArrayList arrayList = new ArrayList();
                linkedHashMap.put(objInvoke, arrayList);
                obj = arrayList;
            } else {
                obj = obj2;
            }
            ((List) obj).add(valueTransform.invoke(t));
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <T, K, M extends Map<? super K, List<T>>> M groupByTo(@NotNull Iterable<? extends T> groupByTo, @NotNull M destination, @NotNull Function1<? super T, ? extends K> keySelector) {
        Object obj;
        Intrinsics.checkParameterIsNotNull(groupByTo, "$this$groupByTo");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        for (T t : groupByTo) {
            Object key = keySelector.invoke(t);
            Object value$iv = destination.get(key);
            if (value$iv == null) {
                ArrayList arrayList = new ArrayList();
                destination.put(key, arrayList);
                obj = arrayList;
            } else {
                obj = value$iv;
            }
            List list = (List) obj;
            list.add(t);
        }
        return destination;
    }

    @NotNull
    public static final <T, K, V, M extends Map<? super K, List<V>>> M groupByTo(@NotNull Iterable<? extends T> groupByTo, @NotNull M destination, @NotNull Function1<? super T, ? extends K> keySelector, @NotNull Function1<? super T, ? extends V> valueTransform) {
        Object obj;
        Intrinsics.checkParameterIsNotNull(groupByTo, "$this$groupByTo");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        Intrinsics.checkParameterIsNotNull(valueTransform, "valueTransform");
        for (Object element : groupByTo) {
            Object key = keySelector.invoke(element);
            Object value$iv = destination.get(key);
            if (value$iv == null) {
                ArrayList arrayList = new ArrayList();
                destination.put(key, arrayList);
                obj = arrayList;
            } else {
                obj = value$iv;
            }
            List list = (List) obj;
            list.add(valueTransform.invoke(element));
        }
        return destination;
    }

    @SinceKotlin(version = "1.1")
    @NotNull
    public static final <T, K> Grouping<T, K> groupingBy(@NotNull Iterable<? extends T> groupingBy, @NotNull Function1<? super T, ? extends K> keySelector) {
        Intrinsics.checkParameterIsNotNull(groupingBy, "$this$groupingBy");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        return new Grouping(groupingBy, keySelector) { // from class: kotlin.collections.CollectionsKt___CollectionsKt.groupingBy.1
            final Iterable $this_groupingBy;
            final Function1 $keySelector;

            {
                this.$this_groupingBy = groupingBy;
                this.$keySelector = keySelector;
            }

            @Override // kotlin.collections.Grouping
            @NotNull
            public Iterator sourceIterator() {
                return this.$this_groupingBy.iterator();
            }

            @Override // kotlin.collections.Grouping
            public Object keyOf(Object obj) {
                return this.$keySelector.invoke(obj);
            }
        };
    }

    @NotNull
    public static final <T, R> List<R> map(@NotNull Iterable<? extends T> map, @NotNull Function1<? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull(map, "$this$map");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        Collection destination$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault(map, 10));
        for (Object item$iv : map) {
            destination$iv.add(transform.invoke(item$iv));
        }
        return (List) destination$iv;
    }

    @NotNull
    public static final <T, R> List<R> mapIndexed(@NotNull Iterable<? extends T> mapIndexed, @NotNull Function2<? super Integer, ? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull(mapIndexed, "$this$mapIndexed");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        Collection destination$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault(mapIndexed, 10));
        int index$iv = 0;
        for (Object item$iv : mapIndexed) {
            int i = index$iv;
            index$iv++;
            if (i < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            destination$iv.add(transform.invoke(Integer.valueOf(i), item$iv));
        }
        return (List) destination$iv;
    }

    @NotNull
    public static final <T, R> List<R> mapIndexedNotNull(@NotNull Iterable<? extends T> mapIndexedNotNull, @NotNull Function2<? super Integer, ? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull(mapIndexedNotNull, "$this$mapIndexedNotNull");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        Collection destination$iv = new ArrayList();
        int index$iv$iv = 0;
        for (Object item$iv$iv : mapIndexedNotNull) {
            int index$iv = index$iv$iv;
            index$iv$iv++;
            if (index$iv < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            Object it$iv = transform.invoke(Integer.valueOf(index$iv), item$iv$iv);
            if (it$iv != null) {
                destination$iv.add(it$iv);
            }
        }
        return (List) destination$iv;
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapIndexedNotNullTo(@NotNull Iterable<? extends T> mapIndexedNotNullTo, @NotNull C destination, @NotNull Function2<? super Integer, ? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull(mapIndexedNotNullTo, "$this$mapIndexedNotNullTo");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        int index$iv = 0;
        for (Object item$iv : mapIndexedNotNullTo) {
            int index = index$iv;
            index$iv++;
            if (index < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            Object it = transform.invoke(Integer.valueOf(index), item$iv);
            if (it != null) {
                destination.add(it);
            }
        }
        return destination;
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapIndexedTo(@NotNull Iterable<? extends T> mapIndexedTo, @NotNull C destination, @NotNull Function2<? super Integer, ? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull(mapIndexedTo, "$this$mapIndexedTo");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        int index = 0;
        for (Object item : mapIndexedTo) {
            int i = index;
            index++;
            if (i < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            destination.add(transform.invoke(Integer.valueOf(i), item));
        }
        return destination;
    }

    @NotNull
    public static final <T, R> List<R> mapNotNull(@NotNull Iterable<? extends T> mapNotNull, @NotNull Function1<? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull(mapNotNull, "$this$mapNotNull");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        Collection destination$iv = new ArrayList();
        for (Object element$iv$iv : mapNotNull) {
            Object it$iv = transform.invoke(element$iv$iv);
            if (it$iv != null) {
                destination$iv.add(it$iv);
            }
        }
        return (List) destination$iv;
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapNotNullTo(@NotNull Iterable<? extends T> mapNotNullTo, @NotNull C destination, @NotNull Function1<? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull(mapNotNullTo, "$this$mapNotNullTo");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        for (Object element$iv : mapNotNullTo) {
            Object it = transform.invoke(element$iv);
            if (it != null) {
                destination.add(it);
            }
        }
        return destination;
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapTo(@NotNull Iterable<? extends T> mapTo, @NotNull C destination, @NotNull Function1<? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull(mapTo, "$this$mapTo");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        for (Object item : mapTo) {
            destination.add(transform.invoke(item));
        }
        return destination;
    }

    @NotNull
    public static final <T> Iterable<IndexedValue<T>> withIndex(@NotNull Iterable<? extends T> withIndex) {
        Intrinsics.checkParameterIsNotNull(withIndex, "$this$withIndex");
        return new IndexingIterable(new Function0(withIndex) { // from class: kotlin.collections.CollectionsKt___CollectionsKt.withIndex.1
            final Iterable $this_withIndex;

            @Override // kotlin.jvm.functions.Function0
            public Object invoke() {
                return invoke();
            }

            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            {
                super(0);
                this.$this_withIndex = withIndex;
            }

            @Override // kotlin.jvm.functions.Function0
            @NotNull
            public final Iterator invoke() {
                return this.$this_withIndex.iterator();
            }
        });
    }

    @NotNull
    public static final <T> List<T> distinct(@NotNull Iterable<? extends T> distinct) {
        Intrinsics.checkParameterIsNotNull(distinct, "$this$distinct");
        return CollectionsKt.toList(CollectionsKt.toMutableSet(distinct));
    }

    @NotNull
    public static final <T, K> List<T> distinctBy(@NotNull Iterable<? extends T> distinctBy, @NotNull Function1<? super T, ? extends K> selector) {
        Intrinsics.checkParameterIsNotNull(distinctBy, "$this$distinctBy");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        HashSet set = new HashSet();
        ArrayList list = new ArrayList();
        for (T t : distinctBy) {
            Object key = selector.invoke(t);
            if (set.add(key)) {
                list.add(t);
            }
        }
        return list;
    }

    @NotNull
    public static final <T> Set<T> intersect(@NotNull Iterable<? extends T> intersect, @NotNull Iterable<? extends T> other) {
        Intrinsics.checkParameterIsNotNull(intersect, "$this$intersect");
        Intrinsics.checkParameterIsNotNull(other, "other");
        Set set = CollectionsKt.toMutableSet(intersect);
        CollectionsKt.retainAll(set, other);
        return set;
    }

    @NotNull
    public static final <T> Set<T> subtract(@NotNull Iterable<? extends T> subtract, @NotNull Iterable<? extends T> other) {
        Intrinsics.checkParameterIsNotNull(subtract, "$this$subtract");
        Intrinsics.checkParameterIsNotNull(other, "other");
        Set set = CollectionsKt.toMutableSet(subtract);
        CollectionsKt.removeAll(set, other);
        return set;
    }

    @NotNull
    public static final <T> Set<T> toMutableSet(@NotNull Iterable<? extends T> toMutableSet) {
        Intrinsics.checkParameterIsNotNull(toMutableSet, "$this$toMutableSet");
        return toMutableSet instanceof Collection ? new LinkedHashSet((Collection) toMutableSet) : (Set) CollectionsKt.toCollection(toMutableSet, new LinkedHashSet());
    }

    @NotNull
    public static final <T> Set<T> union(@NotNull Iterable<? extends T> union, @NotNull Iterable<? extends T> other) {
        Intrinsics.checkParameterIsNotNull(union, "$this$union");
        Intrinsics.checkParameterIsNotNull(other, "other");
        Set set = CollectionsKt.toMutableSet(union);
        CollectionsKt.addAll(set, other);
        return set;
    }

    public static final <T> boolean all(@NotNull Iterable<? extends T> all, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(all, "$this$all");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        if ((all instanceof Collection) && ((Collection) all).isEmpty()) {
            return true;
        }
        for (Object element : all) {
            if (!((Boolean) predicate.invoke(element)).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    public static final <T> boolean any(@NotNull Iterable<? extends T> any) {
        Intrinsics.checkParameterIsNotNull(any, "$this$any");
        if (any instanceof Collection) {
            return !((Collection) any).isEmpty();
        }
        return any.iterator().hasNext();
    }

    public static final <T> boolean any(@NotNull Iterable<? extends T> any, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(any, "$this$any");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        if ((any instanceof Collection) && ((Collection) any).isEmpty()) {
            return false;
        }
        for (Object element : any) {
            if (((Boolean) predicate.invoke(element)).booleanValue()) {
                return true;
            }
        }
        return false;
    }

    public static final <T> int count(@NotNull Iterable<? extends T> count) {
        Intrinsics.checkParameterIsNotNull(count, "$this$count");
        if (count instanceof Collection) {
            return ((Collection) count).size();
        }
        int count2 = 0;
        for (T t : count) {
            count2++;
            if (count2 < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        return count2;
    }

    @InlineOnly
    private static final <T> int count(@NotNull Collection<? extends T> collection) {
        return collection.size();
    }

    public static final <T> int count(@NotNull Iterable<? extends T> count, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(count, "$this$count");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        if ((count instanceof Collection) && ((Collection) count).isEmpty()) {
            return 0;
        }
        int count2 = 0;
        for (Object element : count) {
            if (((Boolean) predicate.invoke(element)).booleanValue()) {
                count2++;
                if (count2 >= 0) {
                    continue;
                } else {
                    if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                        throw new ArithmeticException("Count overflow has happened.");
                    }
                    CollectionsKt.throwCountOverflow();
                }
            }
        }
        return count2;
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static final <T, R> R fold(@NotNull Iterable<? extends T> fold, R r, @NotNull Function2<? super R, ? super T, ? extends R> operation) {
        Intrinsics.checkParameterIsNotNull(fold, "$this$fold");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        R rInvoke = r;
        for (Object element : fold) {
            rInvoke = operation.invoke(rInvoke, element);
        }
        return rInvoke;
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static final <T, R> R foldIndexed(@NotNull Iterable<? extends T> foldIndexed, R r, @NotNull Function3<? super Integer, ? super R, ? super T, ? extends R> operation) {
        Intrinsics.checkParameterIsNotNull(foldIndexed, "$this$foldIndexed");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        int index = 0;
        R rInvoke = r;
        for (Object element : foldIndexed) {
            int i = index;
            index++;
            if (i < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            rInvoke = operation.invoke(Integer.valueOf(i), rInvoke, element);
        }
        return rInvoke;
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static final <T, R> R foldRight(@NotNull List<? extends T> foldRight, R r, @NotNull Function2<? super T, ? super R, ? extends R> operation) {
        Intrinsics.checkParameterIsNotNull(foldRight, "$this$foldRight");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        R rInvoke = r;
        if (!foldRight.isEmpty()) {
            ListIterator iterator = foldRight.listIterator(foldRight.size());
            while (iterator.hasPrevious()) {
                rInvoke = operation.invoke(iterator.previous(), rInvoke);
            }
        }
        return rInvoke;
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static final <T, R> R foldRightIndexed(@NotNull List<? extends T> foldRightIndexed, R r, @NotNull Function3<? super Integer, ? super T, ? super R, ? extends R> operation) {
        Intrinsics.checkParameterIsNotNull(foldRightIndexed, "$this$foldRightIndexed");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        R rInvoke = r;
        if (!foldRightIndexed.isEmpty()) {
            ListIterator iterator = foldRightIndexed.listIterator(foldRightIndexed.size());
            while (iterator.hasPrevious()) {
                int index = iterator.previousIndex();
                rInvoke = operation.invoke(Integer.valueOf(index), iterator.previous(), rInvoke);
            }
        }
        return rInvoke;
    }

    @HidesMembers
    public static final <T> void forEach(@NotNull Iterable<? extends T> forEach, @NotNull Function1<? super T, Unit> action) {
        Intrinsics.checkParameterIsNotNull(forEach, "$this$forEach");
        Intrinsics.checkParameterIsNotNull(action, "action");
        for (Object element : forEach) {
            action.invoke(element);
        }
    }

    public static final <T> void forEachIndexed(@NotNull Iterable<? extends T> forEachIndexed, @NotNull Function2<? super Integer, ? super T, Unit> action) {
        Intrinsics.checkParameterIsNotNull(forEachIndexed, "$this$forEachIndexed");
        Intrinsics.checkParameterIsNotNull(action, "action");
        int index = 0;
        for (Object item : forEachIndexed) {
            int i = index;
            index++;
            if (i < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            action.invoke(Integer.valueOf(i), item);
        }
    }

    @SinceKotlin(version = "1.1")
    @Nullable
    public static final Double max(@NotNull Iterable<Double> max) {
        Intrinsics.checkParameterIsNotNull(max, "$this$max");
        Iterator iterator = max.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        double max2 = iterator.next().doubleValue();
        if (Double.isNaN(max2)) {
            return Double.valueOf(max2);
        }
        while (iterator.hasNext()) {
            double e = iterator.next().doubleValue();
            if (Double.isNaN(e)) {
                return Double.valueOf(e);
            }
            if (max2 < e) {
                max2 = e;
            }
        }
        return Double.valueOf(max2);
    }

    @SinceKotlin(version = "1.1")
    @Nullable
    /* renamed from: max, reason: collision with other method in class */
    public static final Float m777max(@NotNull Iterable<Float> max) {
        Intrinsics.checkParameterIsNotNull(max, "$this$max");
        Iterator iterator = max.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        float max2 = iterator.next().floatValue();
        if (Float.isNaN(max2)) {
            return Float.valueOf(max2);
        }
        while (iterator.hasNext()) {
            float e = iterator.next().floatValue();
            if (Float.isNaN(e)) {
                return Float.valueOf(e);
            }
            if (max2 < e) {
                max2 = e;
            }
        }
        return Float.valueOf(max2);
    }

    @Nullable
    /* renamed from: max, reason: collision with other method in class */
    public static final <T extends Comparable<? super T>> T m778max(@NotNull Iterable<? extends T> max) {
        Intrinsics.checkParameterIsNotNull(max, "$this$max");
        Iterator iterator = max.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        T next = iterator.next();
        while (iterator.hasNext()) {
            T next2 = iterator.next();
            if (next.compareTo(next2) < 0) {
                next = next2;
            }
        }
        return next;
    }

    @Nullable
    public static final <T, R extends Comparable<? super R>> T maxBy(@NotNull Iterable<? extends T> maxBy, @NotNull Function1<? super T, ? extends R> selector) {
        Intrinsics.checkParameterIsNotNull(maxBy, "$this$maxBy");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        Iterator iterator = maxBy.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        T next = iterator.next();
        if (!iterator.hasNext()) {
            return next;
        }
        Comparable maxValue = (Comparable) selector.invoke(next);
        do {
            T next2 = iterator.next();
            Comparable v = (Comparable) selector.invoke(next2);
            if (maxValue.compareTo(v) < 0) {
                next = next2;
                maxValue = v;
            }
        } while (iterator.hasNext());
        return next;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r0v12, types: [java.lang.Object] */
    @Nullable
    public static final <T> T maxWith(@NotNull Iterable<? extends T> maxWith, @NotNull Comparator<? super T> comparator) {
        Intrinsics.checkParameterIsNotNull(maxWith, "$this$maxWith");
        Intrinsics.checkParameterIsNotNull(comparator, "comparator");
        Iterator<? extends T> it = maxWith.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        while (it.hasNext()) {
            ?? r0 = (Object) it.next();
            if (comparator.compare((Object) next, r0) < 0) {
                next = r0;
            }
        }
        return next;
    }

    @SinceKotlin(version = "1.1")
    @Nullable
    public static final Double min(@NotNull Iterable<Double> min) {
        Intrinsics.checkParameterIsNotNull(min, "$this$min");
        Iterator iterator = min.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        double min2 = iterator.next().doubleValue();
        if (Double.isNaN(min2)) {
            return Double.valueOf(min2);
        }
        while (iterator.hasNext()) {
            double e = iterator.next().doubleValue();
            if (Double.isNaN(e)) {
                return Double.valueOf(e);
            }
            if (min2 > e) {
                min2 = e;
            }
        }
        return Double.valueOf(min2);
    }

    @SinceKotlin(version = "1.1")
    @Nullable
    /* renamed from: min, reason: collision with other method in class */
    public static final Float m779min(@NotNull Iterable<Float> min) {
        Intrinsics.checkParameterIsNotNull(min, "$this$min");
        Iterator iterator = min.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        float min2 = iterator.next().floatValue();
        if (Float.isNaN(min2)) {
            return Float.valueOf(min2);
        }
        while (iterator.hasNext()) {
            float e = iterator.next().floatValue();
            if (Float.isNaN(e)) {
                return Float.valueOf(e);
            }
            if (min2 > e) {
                min2 = e;
            }
        }
        return Float.valueOf(min2);
    }

    @Nullable
    /* renamed from: min, reason: collision with other method in class */
    public static final <T extends Comparable<? super T>> T m780min(@NotNull Iterable<? extends T> min) {
        Intrinsics.checkParameterIsNotNull(min, "$this$min");
        Iterator iterator = min.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        T next = iterator.next();
        while (iterator.hasNext()) {
            T next2 = iterator.next();
            if (next.compareTo(next2) > 0) {
                next = next2;
            }
        }
        return next;
    }

    @Nullable
    public static final <T, R extends Comparable<? super R>> T minBy(@NotNull Iterable<? extends T> minBy, @NotNull Function1<? super T, ? extends R> selector) {
        Intrinsics.checkParameterIsNotNull(minBy, "$this$minBy");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        Iterator iterator = minBy.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        T next = iterator.next();
        if (!iterator.hasNext()) {
            return next;
        }
        Comparable minValue = (Comparable) selector.invoke(next);
        do {
            T next2 = iterator.next();
            Comparable v = (Comparable) selector.invoke(next2);
            if (minValue.compareTo(v) > 0) {
                next = next2;
                minValue = v;
            }
        } while (iterator.hasNext());
        return next;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r0v12, types: [java.lang.Object] */
    @Nullable
    public static final <T> T minWith(@NotNull Iterable<? extends T> minWith, @NotNull Comparator<? super T> comparator) {
        Intrinsics.checkParameterIsNotNull(minWith, "$this$minWith");
        Intrinsics.checkParameterIsNotNull(comparator, "comparator");
        Iterator<? extends T> it = minWith.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        while (it.hasNext()) {
            ?? r0 = (Object) it.next();
            if (comparator.compare((Object) next, r0) > 0) {
                next = r0;
            }
        }
        return next;
    }

    public static final <T> boolean none(@NotNull Iterable<? extends T> none) {
        Intrinsics.checkParameterIsNotNull(none, "$this$none");
        return none instanceof Collection ? ((Collection) none).isEmpty() : !none.iterator().hasNext();
    }

    public static final <T> boolean none(@NotNull Iterable<? extends T> none, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(none, "$this$none");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        if ((none instanceof Collection) && ((Collection) none).isEmpty()) {
            return true;
        }
        for (Object element : none) {
            if (((Boolean) predicate.invoke(element)).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    @SinceKotlin(version = "1.1")
    @NotNull
    public static final <T, C extends Iterable<? extends T>> C onEach(@NotNull C onEach, @NotNull Function1<? super T, Unit> action) {
        Intrinsics.checkParameterIsNotNull(onEach, "$this$onEach");
        Intrinsics.checkParameterIsNotNull(action, "action");
        for (Object element : onEach) {
            action.invoke(element);
        }
        return onEach;
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static final <S, T extends S> S reduce(@NotNull Iterable<? extends T> reduce, @NotNull Function2<? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkParameterIsNotNull(reduce, "$this$reduce");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        Iterator<? extends T> it = reduce.iterator();
        if (!it.hasNext()) {
            throw new UnsupportedOperationException("Empty collection can't be reduced.");
        }
        T next = it.next();
        while (true) {
            S s = next;
            if (it.hasNext()) {
                next = operation.invoke(s, it.next());
            } else {
                return s;
            }
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static final <S, T extends S> S reduceIndexed(@NotNull Iterable<? extends T> reduceIndexed, @NotNull Function3<? super Integer, ? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkParameterIsNotNull(reduceIndexed, "$this$reduceIndexed");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        Iterator<? extends T> it = reduceIndexed.iterator();
        if (!it.hasNext()) {
            throw new UnsupportedOperationException("Empty collection can't be reduced.");
        }
        int i = 1;
        T next = it.next();
        while (true) {
            S s = next;
            if (it.hasNext()) {
                int i2 = i;
                i++;
                if (i2 < 0) {
                    if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                        throw new ArithmeticException("Index overflow has happened.");
                    }
                    CollectionsKt.throwIndexOverflow();
                }
                next = operation.invoke(Integer.valueOf(i2), s, it.next());
            } else {
                return s;
            }
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static final <S, T extends S> S reduceRight(@NotNull List<? extends T> reduceRight, @NotNull Function2<? super T, ? super S, ? extends S> operation) {
        Intrinsics.checkParameterIsNotNull(reduceRight, "$this$reduceRight");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        ListIterator<? extends T> listIterator = reduceRight.listIterator(reduceRight.size());
        if (!listIterator.hasPrevious()) {
            throw new UnsupportedOperationException("Empty list can't be reduced.");
        }
        T tPrevious = listIterator.previous();
        while (true) {
            S s = tPrevious;
            if (listIterator.hasPrevious()) {
                tPrevious = operation.invoke(listIterator.previous(), s);
            } else {
                return s;
            }
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static final <S, T extends S> S reduceRightIndexed(@NotNull List<? extends T> reduceRightIndexed, @NotNull Function3<? super Integer, ? super T, ? super S, ? extends S> operation) {
        Intrinsics.checkParameterIsNotNull(reduceRightIndexed, "$this$reduceRightIndexed");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        ListIterator<? extends T> listIterator = reduceRightIndexed.listIterator(reduceRightIndexed.size());
        if (!listIterator.hasPrevious()) {
            throw new UnsupportedOperationException("Empty list can't be reduced.");
        }
        T tPrevious = listIterator.previous();
        while (true) {
            S s = tPrevious;
            if (listIterator.hasPrevious()) {
                tPrevious = operation.invoke(Integer.valueOf(listIterator.previousIndex()), listIterator.previous(), s);
            } else {
                return s;
            }
        }
    }

    public static final <T> int sumBy(@NotNull Iterable<? extends T> sumBy, @NotNull Function1<? super T, Integer> selector) {
        Intrinsics.checkParameterIsNotNull(sumBy, "$this$sumBy");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        int sum = 0;
        for (Object element : sumBy) {
            sum += ((Number) selector.invoke(element)).intValue();
        }
        return sum;
    }

    public static final <T> double sumByDouble(@NotNull Iterable<? extends T> sumByDouble, @NotNull Function1<? super T, Double> selector) {
        Intrinsics.checkParameterIsNotNull(sumByDouble, "$this$sumByDouble");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        double sum = 0.0d;
        for (Object element : sumByDouble) {
            sum += ((Number) selector.invoke(element)).doubleValue();
        }
        return sum;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static final <T> Iterable<T> requireNoNulls(@NotNull Iterable<? extends T> requireNoNulls) {
        Intrinsics.checkParameterIsNotNull(requireNoNulls, "$this$requireNoNulls");
        for (Object element : requireNoNulls) {
            if (element == null) {
                throw new IllegalArgumentException("null element found in " + requireNoNulls + '.');
            }
        }
        return requireNoNulls;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static final <T> List<T> requireNoNulls(@NotNull List<? extends T> requireNoNulls) {
        Intrinsics.checkParameterIsNotNull(requireNoNulls, "$this$requireNoNulls");
        for (Object element : requireNoNulls) {
            if (element == null) {
                throw new IllegalArgumentException("null element found in " + requireNoNulls + '.');
            }
        }
        return requireNoNulls;
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T> List<List<T>> chunked(@NotNull Iterable<? extends T> chunked, int size) {
        Intrinsics.checkParameterIsNotNull(chunked, "$this$chunked");
        return CollectionsKt.windowed(chunked, size, size, true);
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T, R> List<R> chunked(@NotNull Iterable<? extends T> chunked, int size, @NotNull Function1<? super List<? extends T>, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull(chunked, "$this$chunked");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        return CollectionsKt.windowed(chunked, size, size, true, transform);
    }

    @NotNull
    public static final <T> List<T> minus(@NotNull Iterable<? extends T> minus, T t) {
        boolean z;
        Intrinsics.checkParameterIsNotNull(minus, "$this$minus");
        ArrayList result = new ArrayList(CollectionsKt.collectionSizeOrDefault(minus, 10));
        boolean removed = false;
        for (T t2 : minus) {
            if (removed || !Intrinsics.areEqual(t2, t)) {
                z = true;
            } else {
                removed = true;
                z = false;
            }
            if (z) {
                result.add(t2);
            }
        }
        return result;
    }

    @NotNull
    public static final <T> List<T> minus(@NotNull Iterable<? extends T> minus, @NotNull T[] elements) {
        Intrinsics.checkParameterIsNotNull(minus, "$this$minus");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        if (elements.length == 0) {
            return CollectionsKt.toList(minus);
        }
        HashSet other = ArraysKt.toHashSet(elements);
        Collection destination$iv$iv = new ArrayList();
        for (T t : minus) {
            if (!other.contains(t)) {
                destination$iv$iv.add(t);
            }
        }
        return (List) destination$iv$iv;
    }

    @NotNull
    public static final <T> List<T> minus(@NotNull Iterable<? extends T> minus, @NotNull Iterable<? extends T> elements) {
        Intrinsics.checkParameterIsNotNull(minus, "$this$minus");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        Collection other = CollectionsKt.convertToSetForSetOperationWith(elements, minus);
        if (other.isEmpty()) {
            return CollectionsKt.toList(minus);
        }
        Collection destination$iv$iv = new ArrayList();
        for (T t : minus) {
            if (!other.contains(t)) {
                destination$iv$iv.add(t);
            }
        }
        return (List) destination$iv$iv;
    }

    @NotNull
    public static final <T> List<T> minus(@NotNull Iterable<? extends T> minus, @NotNull Sequence<? extends T> elements) {
        Intrinsics.checkParameterIsNotNull(minus, "$this$minus");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        HashSet other = SequencesKt.toHashSet(elements);
        if (other.isEmpty()) {
            return CollectionsKt.toList(minus);
        }
        Collection destination$iv$iv = new ArrayList();
        for (T t : minus) {
            if (!other.contains(t)) {
                destination$iv$iv.add(t);
            }
        }
        return (List) destination$iv$iv;
    }

    @InlineOnly
    private static final <T> List<T> minusElement(@NotNull Iterable<? extends T> iterable, T t) {
        return CollectionsKt.minus(iterable, t);
    }

    @NotNull
    public static final <T> Pair<List<T>, List<T>> partition(@NotNull Iterable<? extends T> partition, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(partition, "$this$partition");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        ArrayList first = new ArrayList();
        ArrayList second = new ArrayList();
        for (T t : partition) {
            if (((Boolean) predicate.invoke(t)).booleanValue()) {
                first.add(t);
            } else {
                second.add(t);
            }
        }
        return new Pair(first, second);
    }

    @NotNull
    public static final <T> List<T> plus(@NotNull Iterable<? extends T> plus, T t) {
        Intrinsics.checkParameterIsNotNull(plus, "$this$plus");
        if (plus instanceof Collection) {
            return CollectionsKt.plus((Collection) plus, (Object) t);
        }
        ArrayList result = new ArrayList();
        CollectionsKt.addAll(result, plus);
        result.add(t);
        return result;
    }

    @NotNull
    public static final <T> List<T> plus(@NotNull Collection<? extends T> plus, T t) {
        Intrinsics.checkParameterIsNotNull(plus, "$this$plus");
        ArrayList result = new ArrayList(plus.size() + 1);
        result.addAll(plus);
        result.add(t);
        return result;
    }

    @NotNull
    public static final <T> List<T> plus(@NotNull Iterable<? extends T> plus, @NotNull T[] elements) {
        Intrinsics.checkParameterIsNotNull(plus, "$this$plus");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        if (plus instanceof Collection) {
            return CollectionsKt.plus((Collection) plus, (Object[]) elements);
        }
        ArrayList result = new ArrayList();
        CollectionsKt.addAll(result, plus);
        CollectionsKt.addAll(result, elements);
        return result;
    }

    @NotNull
    public static final <T> List<T> plus(@NotNull Collection<? extends T> plus, @NotNull T[] elements) {
        Intrinsics.checkParameterIsNotNull(plus, "$this$plus");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        ArrayList result = new ArrayList(plus.size() + elements.length);
        result.addAll(plus);
        CollectionsKt.addAll(result, elements);
        return result;
    }

    @NotNull
    public static final <T> List<T> plus(@NotNull Iterable<? extends T> plus, @NotNull Iterable<? extends T> elements) {
        Intrinsics.checkParameterIsNotNull(plus, "$this$plus");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        if (plus instanceof Collection) {
            return CollectionsKt.plus((Collection) plus, (Iterable) elements);
        }
        ArrayList result = new ArrayList();
        CollectionsKt.addAll(result, plus);
        CollectionsKt.addAll(result, elements);
        return result;
    }

    @NotNull
    public static final <T> List<T> plus(@NotNull Collection<? extends T> plus, @NotNull Iterable<? extends T> elements) {
        Intrinsics.checkParameterIsNotNull(plus, "$this$plus");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        if (elements instanceof Collection) {
            ArrayList result = new ArrayList(plus.size() + ((Collection) elements).size());
            result.addAll(plus);
            result.addAll((Collection) elements);
            return result;
        }
        ArrayList result2 = new ArrayList(plus);
        CollectionsKt.addAll(result2, elements);
        return result2;
    }

    @NotNull
    public static final <T> List<T> plus(@NotNull Iterable<? extends T> plus, @NotNull Sequence<? extends T> elements) {
        Intrinsics.checkParameterIsNotNull(plus, "$this$plus");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        ArrayList result = new ArrayList();
        CollectionsKt.addAll(result, plus);
        CollectionsKt.addAll(result, elements);
        return result;
    }

    @NotNull
    public static final <T> List<T> plus(@NotNull Collection<? extends T> plus, @NotNull Sequence<? extends T> elements) {
        Intrinsics.checkParameterIsNotNull(plus, "$this$plus");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        ArrayList result = new ArrayList(plus.size() + 10);
        result.addAll(plus);
        CollectionsKt.addAll(result, elements);
        return result;
    }

    @InlineOnly
    private static final <T> List<T> plusElement(@NotNull Iterable<? extends T> iterable, T t) {
        return CollectionsKt.plus(iterable, t);
    }

    @InlineOnly
    private static final <T> List<T> plusElement(@NotNull Collection<? extends T> collection, T t) {
        return CollectionsKt.plus((Collection) collection, (Object) t);
    }

    public static /* synthetic */ List windowed$default(Iterable iterable, int i, int i2, boolean z, int i3, Object obj) {
        if ((i3 & 2) != 0) {
            i2 = 1;
        }
        if ((i3 & 4) != 0) {
            z = false;
        }
        return CollectionsKt.windowed(iterable, i, i2, z);
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T> List<List<T>> windowed(@NotNull Iterable<? extends T> windowed, int size, int step, boolean partialWindows) {
        int windowSize;
        Intrinsics.checkParameterIsNotNull(windowed, "$this$windowed");
        SlidingWindowKt.checkWindowSizeStep(size, step);
        if (!(windowed instanceof RandomAccess) || !(windowed instanceof List)) {
            ArrayList result = new ArrayList();
            Iterator $this$forEach$iv = SlidingWindowKt.windowedIterator(windowed.iterator(), size, step, partialWindows, false);
            while ($this$forEach$iv.hasNext()) {
                Object element$iv = $this$forEach$iv.next();
                List it = (List) element$iv;
                result.add(it);
            }
            return result;
        }
        int thisSize = ((List) windowed).size();
        int resultCapacity = (thisSize / step) + (thisSize % step == 0 ? 0 : 1);
        ArrayList result2 = new ArrayList(resultCapacity);
        int i = 0;
        while (true) {
            int index = i;
            if (0 > index || thisSize <= index || ((windowSize = RangesKt.coerceAtMost(size, thisSize - index)) < size && !partialWindows)) {
                break;
            }
            ArrayList arrayList = new ArrayList(windowSize);
            for (int i2 = 0; i2 < windowSize; i2++) {
                int it2 = i2;
                arrayList.add(((List) windowed).get(it2 + index));
            }
            result2.add(arrayList);
            i = index + step;
        }
        return result2;
    }

    public static /* synthetic */ List windowed$default(Iterable iterable, int i, int i2, boolean z, Function1 function1, int i3, Object obj) {
        if ((i3 & 2) != 0) {
            i2 = 1;
        }
        if ((i3 & 4) != 0) {
            z = false;
        }
        return CollectionsKt.windowed(iterable, i, i2, z, function1);
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T, R> List<R> windowed(@NotNull Iterable<? extends T> windowed, int size, int step, boolean partialWindows, @NotNull Function1<? super List<? extends T>, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull(windowed, "$this$windowed");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        SlidingWindowKt.checkWindowSizeStep(size, step);
        if ((windowed instanceof RandomAccess) && (windowed instanceof List)) {
            int thisSize = ((List) windowed).size();
            int resultCapacity = (thisSize / step) + (thisSize % step == 0 ? 0 : 1);
            ArrayList result = new ArrayList(resultCapacity);
            MovingSubList window = new MovingSubList((List) windowed);
            int i = 0;
            while (true) {
                int index = i;
                if (0 > index || thisSize <= index) {
                    break;
                }
                int windowSize = RangesKt.coerceAtMost(size, thisSize - index);
                if (!partialWindows && windowSize < size) {
                    break;
                }
                window.move(index, index + windowSize);
                result.add(transform.invoke(window));
                i = index + step;
            }
            return result;
        }
        ArrayList result2 = new ArrayList();
        Iterator $this$forEach$iv = SlidingWindowKt.windowedIterator(windowed.iterator(), size, step, partialWindows, true);
        while ($this$forEach$iv.hasNext()) {
            Object element$iv = $this$forEach$iv.next();
            Object it = (List) element$iv;
            result2.add(transform.invoke(it));
        }
        return result2;
    }

    @NotNull
    public static final <T, R> List<Pair<T, R>> zip(@NotNull Iterable<? extends T> zip, @NotNull R[] other) {
        Intrinsics.checkParameterIsNotNull(zip, "$this$zip");
        Intrinsics.checkParameterIsNotNull(other, "other");
        int arraySize$iv = other.length;
        ArrayList list$iv = new ArrayList(Math.min(CollectionsKt.collectionSizeOrDefault(zip, 10), arraySize$iv));
        int i$iv = 0;
        for (Object element$iv : zip) {
            if (i$iv >= arraySize$iv) {
                break;
            }
            int i = i$iv;
            i$iv++;
            list$iv.add(TuplesKt.m32to(element$iv, other[i]));
        }
        return list$iv;
    }

    @NotNull
    public static final <T, R, V> List<V> zip(@NotNull Iterable<? extends T> zip, @NotNull R[] other, @NotNull Function2<? super T, ? super R, ? extends V> transform) {
        Intrinsics.checkParameterIsNotNull(zip, "$this$zip");
        Intrinsics.checkParameterIsNotNull(other, "other");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        int arraySize = other.length;
        ArrayList list = new ArrayList(Math.min(CollectionsKt.collectionSizeOrDefault(zip, 10), arraySize));
        int i = 0;
        for (Object element : zip) {
            if (i >= arraySize) {
                break;
            }
            int i2 = i;
            i++;
            list.add(transform.invoke(element, other[i2]));
        }
        return list;
    }

    @NotNull
    public static final <T, R> List<Pair<T, R>> zip(@NotNull Iterable<? extends T> zip, @NotNull Iterable<? extends R> other) {
        Intrinsics.checkParameterIsNotNull(zip, "$this$zip");
        Intrinsics.checkParameterIsNotNull(other, "other");
        Iterator first$iv = zip.iterator();
        Iterator second$iv = other.iterator();
        ArrayList list$iv = new ArrayList(Math.min(CollectionsKt.collectionSizeOrDefault(zip, 10), CollectionsKt.collectionSizeOrDefault(other, 10)));
        while (first$iv.hasNext() && second$iv.hasNext()) {
            Object t1 = first$iv.next();
            Object t2 = second$iv.next();
            list$iv.add(TuplesKt.m32to(t1, t2));
        }
        return list$iv;
    }

    @NotNull
    public static final <T, R, V> List<V> zip(@NotNull Iterable<? extends T> zip, @NotNull Iterable<? extends R> other, @NotNull Function2<? super T, ? super R, ? extends V> transform) {
        Intrinsics.checkParameterIsNotNull(zip, "$this$zip");
        Intrinsics.checkParameterIsNotNull(other, "other");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        Iterator first = zip.iterator();
        Iterator second = other.iterator();
        ArrayList list = new ArrayList(Math.min(CollectionsKt.collectionSizeOrDefault(zip, 10), CollectionsKt.collectionSizeOrDefault(other, 10)));
        while (first.hasNext() && second.hasNext()) {
            list.add(transform.invoke(first.next(), second.next()));
        }
        return list;
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T> List<Pair<T, T>> zipWithNext(@NotNull Iterable<? extends T> zipWithNext) {
        Intrinsics.checkParameterIsNotNull(zipWithNext, "$this$zipWithNext");
        Iterator iterator$iv = zipWithNext.iterator();
        if (!iterator$iv.hasNext()) {
            return CollectionsKt.emptyList();
        }
        List result$iv = new ArrayList();
        Object next = iterator$iv.next();
        while (true) {
            Object current$iv = next;
            if (iterator$iv.hasNext()) {
                Object next$iv = iterator$iv.next();
                result$iv.add(TuplesKt.m32to(current$iv, next$iv));
                next = next$iv;
            } else {
                return result$iv;
            }
        }
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T, R> List<R> zipWithNext(@NotNull Iterable<? extends T> zipWithNext, @NotNull Function2<? super T, ? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull(zipWithNext, "$this$zipWithNext");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        Iterator iterator = zipWithNext.iterator();
        if (!iterator.hasNext()) {
            return CollectionsKt.emptyList();
        }
        List result = new ArrayList();
        Object next = iterator.next();
        while (true) {
            Object current = next;
            if (iterator.hasNext()) {
                Object next2 = iterator.next();
                result.add(transform.invoke(current, next2));
                next = next2;
            } else {
                return result;
            }
        }
    }

    public static /* synthetic */ Appendable joinTo$default(Iterable iterable, Appendable appendable, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int i, CharSequence charSequence4, Function1 function1, int i2, Object obj) {
        if ((i2 & 2) != 0) {
        }
        if ((i2 & 4) != 0) {
        }
        if ((i2 & 8) != 0) {
        }
        if ((i2 & 16) != 0) {
            i = -1;
        }
        if ((i2 & 32) != 0) {
        }
        if ((i2 & 64) != 0) {
            function1 = (Function1) null;
        }
        return CollectionsKt.joinTo(iterable, appendable, charSequence, charSequence2, charSequence3, i, charSequence4, function1);
    }

    @NotNull
    public static final <T, A extends Appendable> A joinTo(@NotNull Iterable<? extends T> joinTo, @NotNull A buffer, @NotNull CharSequence separator, @NotNull CharSequence prefix, @NotNull CharSequence postfix, int limit, @NotNull CharSequence truncated, @Nullable Function1<? super T, ? extends CharSequence> function1) throws IOException {
        Intrinsics.checkParameterIsNotNull(joinTo, "$this$joinTo");
        Intrinsics.checkParameterIsNotNull(buffer, "buffer");
        Intrinsics.checkParameterIsNotNull(separator, "separator");
        Intrinsics.checkParameterIsNotNull(prefix, "prefix");
        Intrinsics.checkParameterIsNotNull(postfix, "postfix");
        Intrinsics.checkParameterIsNotNull(truncated, "truncated");
        buffer.append(prefix);
        int count = 0;
        for (Object element : joinTo) {
            count++;
            if (count > 1) {
                buffer.append(separator);
            }
            if (limit >= 0 && count > limit) {
                break;
            }
            StringsKt.appendElement(buffer, element, function1);
        }
        if (limit >= 0 && count > limit) {
            buffer.append(truncated);
        }
        buffer.append(postfix);
        return buffer;
    }

    public static /* synthetic */ String joinToString$default(Iterable iterable, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int i, CharSequence charSequence4, Function1 function1, int i2, Object obj) {
        if ((i2 & 1) != 0) {
        }
        if ((i2 & 2) != 0) {
        }
        if ((i2 & 4) != 0) {
        }
        if ((i2 & 8) != 0) {
            i = -1;
        }
        if ((i2 & 16) != 0) {
        }
        if ((i2 & 32) != 0) {
            function1 = (Function1) null;
        }
        return CollectionsKt.joinToString(iterable, charSequence, charSequence2, charSequence3, i, charSequence4, function1);
    }

    @NotNull
    public static final <T> String joinToString(@NotNull Iterable<? extends T> joinToString, @NotNull CharSequence separator, @NotNull CharSequence prefix, @NotNull CharSequence postfix, int limit, @NotNull CharSequence truncated, @Nullable Function1<? super T, ? extends CharSequence> function1) {
        Intrinsics.checkParameterIsNotNull(joinToString, "$this$joinToString");
        Intrinsics.checkParameterIsNotNull(separator, "separator");
        Intrinsics.checkParameterIsNotNull(prefix, "prefix");
        Intrinsics.checkParameterIsNotNull(postfix, "postfix");
        Intrinsics.checkParameterIsNotNull(truncated, "truncated");
        String string = ((StringBuilder) CollectionsKt.joinTo(joinToString, new StringBuilder(), separator, prefix, postfix, limit, truncated, function1)).toString();
        Intrinsics.checkExpressionValueIsNotNull(string, "joinTo(StringBuilder(), \u2026ed, transform).toString()");
        return string;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @InlineOnly
    private static final <T> Iterable<T> asIterable(@NotNull Iterable<? extends T> iterable) {
        return iterable;
    }

    @NotNull
    public static final <T> Sequence<T> asSequence(@NotNull final Iterable<? extends T> asSequence) {
        Intrinsics.checkParameterIsNotNull(asSequence, "$this$asSequence");
        return new Sequence(asSequence) { // from class: kotlin.collections.CollectionsKt___CollectionsKt$asSequence$$inlined$Sequence$1
            final Iterable $this_asSequence$inlined;

            {
                this.$this_asSequence$inlined = asSequence;
            }

            @Override // kotlin.sequences.Sequence
            @NotNull
            public Iterator iterator() {
                return this.$this_asSequence$inlined.iterator();
            }
        };
    }

    @JvmName(name = "averageOfByte")
    public static final double averageOfByte(@NotNull Iterable<Byte> average) {
        Intrinsics.checkParameterIsNotNull(average, "$this$average");
        double sum = 0.0d;
        int count = 0;
        Iterator<Byte> it = average.iterator();
        while (it.hasNext()) {
            byte element = it.next().byteValue();
            sum += element;
            count++;
            if (count < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        return count == 0 ? DoubleCompanionObject.INSTANCE.getNaN() : sum / count;
    }

    @JvmName(name = "averageOfShort")
    public static final double averageOfShort(@NotNull Iterable<Short> average) {
        Intrinsics.checkParameterIsNotNull(average, "$this$average");
        double sum = 0.0d;
        int count = 0;
        Iterator<Short> it = average.iterator();
        while (it.hasNext()) {
            short element = it.next().shortValue();
            sum += element;
            count++;
            if (count < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        return count == 0 ? DoubleCompanionObject.INSTANCE.getNaN() : sum / count;
    }

    @JvmName(name = "averageOfInt")
    public static final double averageOfInt(@NotNull Iterable<Integer> average) {
        Intrinsics.checkParameterIsNotNull(average, "$this$average");
        double sum = 0.0d;
        int count = 0;
        Iterator<Integer> it = average.iterator();
        while (it.hasNext()) {
            int element = it.next().intValue();
            sum += element;
            count++;
            if (count < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        return count == 0 ? DoubleCompanionObject.INSTANCE.getNaN() : sum / count;
    }

    @JvmName(name = "averageOfLong")
    public static final double averageOfLong(@NotNull Iterable<Long> average) {
        Intrinsics.checkParameterIsNotNull(average, "$this$average");
        double sum = 0.0d;
        int count = 0;
        Iterator<Long> it = average.iterator();
        while (it.hasNext()) {
            long element = it.next().longValue();
            sum += element;
            count++;
            if (count < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        return count == 0 ? DoubleCompanionObject.INSTANCE.getNaN() : sum / count;
    }

    @JvmName(name = "averageOfFloat")
    public static final double averageOfFloat(@NotNull Iterable<Float> average) {
        Intrinsics.checkParameterIsNotNull(average, "$this$average");
        double sum = 0.0d;
        int count = 0;
        Iterator<Float> it = average.iterator();
        while (it.hasNext()) {
            float element = it.next().floatValue();
            sum += element;
            count++;
            if (count < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        return count == 0 ? DoubleCompanionObject.INSTANCE.getNaN() : sum / count;
    }

    @JvmName(name = "averageOfDouble")
    public static final double averageOfDouble(@NotNull Iterable<Double> average) {
        Intrinsics.checkParameterIsNotNull(average, "$this$average");
        double sum = 0.0d;
        int count = 0;
        Iterator<Double> it = average.iterator();
        while (it.hasNext()) {
            double element = it.next().doubleValue();
            sum += element;
            count++;
            if (count < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        return count == 0 ? DoubleCompanionObject.INSTANCE.getNaN() : sum / count;
    }

    @JvmName(name = "sumOfByte")
    public static final int sumOfByte(@NotNull Iterable<Byte> sum) {
        Intrinsics.checkParameterIsNotNull(sum, "$this$sum");
        int sum2 = 0;
        Iterator<Byte> it = sum.iterator();
        while (it.hasNext()) {
            byte element = it.next().byteValue();
            sum2 += element;
        }
        return sum2;
    }

    @JvmName(name = "sumOfShort")
    public static final int sumOfShort(@NotNull Iterable<Short> sum) {
        Intrinsics.checkParameterIsNotNull(sum, "$this$sum");
        int sum2 = 0;
        Iterator<Short> it = sum.iterator();
        while (it.hasNext()) {
            short element = it.next().shortValue();
            sum2 += element;
        }
        return sum2;
    }

    @JvmName(name = "sumOfInt")
    public static final int sumOfInt(@NotNull Iterable<Integer> sum) {
        Intrinsics.checkParameterIsNotNull(sum, "$this$sum");
        int sum2 = 0;
        Iterator<Integer> it = sum.iterator();
        while (it.hasNext()) {
            int element = it.next().intValue();
            sum2 += element;
        }
        return sum2;
    }

    @JvmName(name = "sumOfLong")
    public static final long sumOfLong(@NotNull Iterable<Long> sum) {
        Intrinsics.checkParameterIsNotNull(sum, "$this$sum");
        long sum2 = 0;
        Iterator<Long> it = sum.iterator();
        while (it.hasNext()) {
            long element = it.next().longValue();
            sum2 += element;
        }
        return sum2;
    }

    @JvmName(name = "sumOfFloat")
    public static final float sumOfFloat(@NotNull Iterable<Float> sum) {
        Intrinsics.checkParameterIsNotNull(sum, "$this$sum");
        float sum2 = 0.0f;
        Iterator<Float> it = sum.iterator();
        while (it.hasNext()) {
            float element = it.next().floatValue();
            sum2 += element;
        }
        return sum2;
    }

    @JvmName(name = "sumOfDouble")
    public static final double sumOfDouble(@NotNull Iterable<Double> sum) {
        Intrinsics.checkParameterIsNotNull(sum, "$this$sum");
        double sum2 = 0.0d;
        Iterator<Double> it = sum.iterator();
        while (it.hasNext()) {
            double element = it.next().doubleValue();
            sum2 += element;
        }
        return sum2;
    }
}
