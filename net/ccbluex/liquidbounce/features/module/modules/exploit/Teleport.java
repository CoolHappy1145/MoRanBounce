package net.ccbluex.liquidbounce.features.module.modules.exploit;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.vecmath.Vector3d;
import net.ccbluex.liquidbounce.api.enums.MaterialType;
import net.ccbluex.liquidbounce.api.minecraft.block.state.IIBlockState;
import net.ccbluex.liquidbounce.api.minecraft.client.entity.IEntityPlayerSP;
import net.ccbluex.liquidbounce.api.minecraft.network.IPacket;
import net.ccbluex.liquidbounce.api.minecraft.network.play.client.ICPacketEntityAction;
import net.ccbluex.liquidbounce.api.minecraft.network.play.client.ICPacketPlayer;
import net.ccbluex.liquidbounce.api.minecraft.renderer.entity.IRenderManager;
import net.ccbluex.liquidbounce.api.minecraft.util.IMovingObjectPosition;
import net.ccbluex.liquidbounce.api.minecraft.util.WBlockPos;
import net.ccbluex.liquidbounce.api.minecraft.util.WVec3;
import net.ccbluex.liquidbounce.event.EventTarget;
import net.ccbluex.liquidbounce.event.MoveEvent;
import net.ccbluex.liquidbounce.event.PacketEvent;
import net.ccbluex.liquidbounce.event.Render3DEvent;
import net.ccbluex.liquidbounce.event.UpdateEvent;
import net.ccbluex.liquidbounce.features.module.Module;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.utils.ClientUtils;
import net.ccbluex.liquidbounce.utils.MovementUtils;
import net.ccbluex.liquidbounce.utils.PathUtils;
import net.ccbluex.liquidbounce.utils.Skid.SGL;
import net.ccbluex.liquidbounce.utils.block.BlockUtils;
import net.ccbluex.liquidbounce.utils.render.RenderUtils;
import net.ccbluex.liquidbounce.utils.timer.TickTimer;
import net.ccbluex.liquidbounce.value.BoolValue;
import net.ccbluex.liquidbounce.value.ListValue;
import org.lwjgl.input.Mouse;
import org.lwjgl.opengl.GL11;

@ModuleInfo(name = "Teleport", description = "Allows you to teleport around.", category = ModuleCategory.EXPLOIT)
/* loaded from: L-out.jar:net/ccbluex/liquidbounce/features/module/modules/exploit/Teleport.class */
public class Teleport extends Module {
    private boolean hadGround;
    private double fixedY;
    private int delay;
    private WBlockPos endPos;
    private IMovingObjectPosition objectPosition;
    private final BoolValue ignoreNoCollision = new BoolValue("IgnoreNoCollision", true);
    private final ListValue modeValue = new ListValue("Mode", new String[]{"Blink", "Flag", "Rewinside", "OldRewinside", "Spoof", "Minesucht", "AAC3.5.0"}, "Blink");
    private final ListValue buttonValue = new ListValue("Button", new String[]{"Left", "Right", "Middle"}, "Middle");
    private final TickTimer flyTimer = new TickTimer();
    private final List packets = new ArrayList();
    private boolean disableLogger = false;
    private boolean zitter = false;
    private boolean doTeleport = false;
    private boolean freeze = false;
    private final TickTimer freezeTimer = new TickTimer();

    public void onEnable() {
        if (((String) this.modeValue.get()).equalsIgnoreCase("AAC3.5.0")) {
            ClientUtils.displayChatMessage("\u00a7c>>> \u00a7a\u00a7lTeleport \u00a7fAAC 3.5.0 \u00a7c<<<");
            ClientUtils.displayChatMessage("\u00a7cHow to teleport: \u00a7aPress " + ((String) this.buttonValue.get()) + " mouse button.");
            ClientUtils.displayChatMessage("\u00a7cHow to cancel teleport: \u00a7aDisable teleport module.");
        }
    }

    public void onDisable() {
        this.fixedY = 0.0d;
        this.delay = 0;
        f157mc.getTimer().setTimerSpeed(1.0f);
        this.endPos = null;
        this.hadGround = false;
        this.freeze = false;
        this.disableLogger = false;
        this.flyTimer.reset();
        this.packets.clear();
    }

    @EventTarget
    public void onUpdate(UpdateEvent updateEvent) {
        double x;
        double y;
        double z;
        int iIndexOf = Arrays.asList(this.buttonValue.getValues()).indexOf(this.buttonValue.get());
        IEntityPlayerSP thePlayer = f157mc.getThePlayer();
        if (thePlayer == null) {
        }
        if (((String) this.modeValue.get()).equals("AAC3.5.0")) {
            this.freezeTimer.update();
            if (this.freeze && this.freezeTimer.hasTimePassed(40)) {
                this.freezeTimer.reset();
                this.freeze = false;
                setState(false);
            }
            if (!this.flyTimer.hasTimePassed(60)) {
                this.flyTimer.update();
                if (thePlayer.getOnGround()) {
                    thePlayer.jump();
                } else {
                    MovementUtils.forward(this.zitter ? -0.21d : 0.21d);
                    this.zitter = !this.zitter;
                }
                this.hadGround = false;
                return;
            }
            if (thePlayer.getOnGround()) {
                this.hadGround = true;
            }
            if (!this.hadGround) {
                return;
            }
            if (thePlayer.getOnGround()) {
                thePlayer.setPositionAndUpdate(thePlayer.getPosX(), thePlayer.getPosY() + 0.2d, thePlayer.getPosZ());
            }
            thePlayer.getCapabilities().setFlying(false);
            thePlayer.setMotionX(0.0d);
            thePlayer.setMotionY(0.0d);
            thePlayer.setMotionZ(0.0d);
            if (f157mc.getGameSettings().getKeyBindJump().isKeyDown()) {
                thePlayer.setMotionY(thePlayer.getMotionY() + 2.0d);
            }
            if (f157mc.getGameSettings().getKeyBindSneak().isKeyDown()) {
                thePlayer.setMotionY(thePlayer.getMotionY() - 2.0d);
            }
            MovementUtils.strafe(2.0f);
            if (Mouse.isButtonDown(iIndexOf) && !this.doTeleport) {
                thePlayer.setPositionAndUpdate(thePlayer.getPosX(), thePlayer.getPosY() - 11.0d, thePlayer.getPosZ());
                this.disableLogger = true;
                this.packets.forEach(Teleport::lambda$onUpdate$0);
                this.freezeTimer.reset();
                this.freeze = true;
            }
            this.doTeleport = Mouse.isButtonDown(iIndexOf);
            return;
        }
        if (f157mc.getCurrentScreen() == null && Mouse.isButtonDown(iIndexOf) && this.delay <= 0) {
            this.endPos = this.objectPosition.getBlockPos();
            IIBlockState state = BlockUtils.getState(this.endPos);
            if (state.getBlock().getMaterial(state).equals(classProvider.getMaterialEnum(MaterialType.AIR))) {
                this.endPos = null;
                return;
            } else {
                ClientUtils.displayChatMessage("\u00a77[\u00a78\u00a7lTeleport\u00a77] \u00a73Position was set to \u00a78" + this.endPos.getX() + "\u00a73, \u00a78" + ((BlockUtils.getBlock(this.objectPosition.getBlockPos()).getCollisionBoundingBox(f157mc.getTheWorld(), this.objectPosition.getBlockPos(), BlockUtils.getBlock(this.objectPosition.getBlockPos()).getDefaultState()) == null ? this.endPos.getY() + 1 : BlockUtils.getBlock(this.objectPosition.getBlockPos()).getCollisionBoundingBox(f157mc.getTheWorld(), this.objectPosition.getBlockPos(), BlockUtils.getBlock(this.objectPosition.getBlockPos()).getDefaultState()).getMaxY()) + this.fixedY) + "\u00a73, \u00a78" + this.endPos.getZ());
                this.delay = 6;
            }
        }
        if (this.delay > 0) {
            this.delay--;
        }
        if (this.endPos != null) {
            x = this.endPos.getX() + 0.5d;
            y = (BlockUtils.getBlock(this.objectPosition.getBlockPos()).getCollisionBoundingBox(f157mc.getTheWorld(), this.objectPosition.getBlockPos(), BlockUtils.getBlock(this.objectPosition.getBlockPos()).getDefaultState()) == null ? this.endPos.getY() + 1 : BlockUtils.getBlock(this.objectPosition.getBlockPos()).getCollisionBoundingBox(f157mc.getTheWorld(), this.objectPosition.getBlockPos(), BlockUtils.getBlock(this.objectPosition.getBlockPos()).getDefaultState()).getMaxY()) + this.fixedY;
            z = this.endPos.getZ() + 0.5d;
            switch (((String) this.modeValue.get()).toLowerCase()) {
                case "blink":
                    if (thePlayer.isSneaking()) {
                        f157mc.getNetHandler().addToSendQueue(classProvider.createCPacketEntityAction(thePlayer, ICPacketEntityAction.WAction.STOP_SNEAKING));
                        PathUtils.findBlinkPath(x, y, z).forEach((v4) -> {
                            lambda$onUpdate$1(r1, r2, r3, r4, v4);
                        });
                        f157mc.getNetHandler().addToSendQueue(classProvider.createCPacketEntityAction(thePlayer, ICPacketEntityAction.WAction.START_SNEAKING));
                        ClientUtils.displayChatMessage("\u00a77[\u00a78\u00a7lTeleport\u00a77] \u00a73You were teleported to \u00a78" + x + "\u00a73, \u00a78" + y + "\u00a73, \u00a78" + z);
                        break;
                    }
                    break;
                case "flag":
                    if (thePlayer.isSneaking()) {
                        f157mc.getNetHandler().addToSendQueue(classProvider.createCPacketEntityAction(thePlayer, ICPacketEntityAction.WAction.STOP_SNEAKING));
                        f157mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY(), thePlayer.getPosZ(), true));
                        f157mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(x, y, z, true));
                        f157mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY(), thePlayer.getPosZ(), true));
                        f157mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY() + 5.0d, thePlayer.getPosZ(), true));
                        f157mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(x, y, z, true));
                        f157mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(thePlayer.getPosX() + 0.5d, thePlayer.getPosY(), thePlayer.getPosZ() + 0.5d, true));
                        MovementUtils.forward(0.04d);
                        f157mc.getNetHandler().addToSendQueue(classProvider.createCPacketEntityAction(thePlayer, ICPacketEntityAction.WAction.START_SNEAKING));
                        ClientUtils.displayChatMessage("\u00a77[\u00a78\u00a7lTeleport\u00a77] \u00a73You were teleported to \u00a78" + x + "\u00a73, \u00a78" + y + "\u00a73, \u00a78" + z);
                        break;
                    }
                    break;
                case "rewinside":
                    thePlayer.setMotionY(0.1d);
                    f157mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(x, y, z, true));
                    f157mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY() + 0.6d, thePlayer.getPosZ(), true));
                    if (((int) thePlayer.getPosX()) == ((int) x) && ((int) thePlayer.getPosY()) == ((int) y) && ((int) thePlayer.getPosZ()) == ((int) z)) {
                        ClientUtils.displayChatMessage("\u00a77[\u00a78\u00a7lTeleport\u00a77] \u00a73You were teleported to \u00a78" + x + "\u00a73, \u00a78" + y + "\u00a73, \u00a78" + z);
                        this.endPos = null;
                        break;
                    } else {
                        ClientUtils.displayChatMessage("\u00a77[\u00a78\u00a7lTeleport\u00a77] \u00a73Teleport try...");
                        break;
                    }
                    break;
                case "oldrewinside":
                    thePlayer.setMotionY(0.1d);
                    f157mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY(), thePlayer.getPosZ(), true));
                    f157mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(x, y, z, true));
                    f157mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY(), thePlayer.getPosZ(), true));
                    f157mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY(), thePlayer.getPosZ(), true));
                    f157mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(x, y, z, true));
                    f157mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY(), thePlayer.getPosZ(), true));
                    if (((int) thePlayer.getPosX()) == ((int) x) && ((int) thePlayer.getPosY()) == ((int) y) && ((int) thePlayer.getPosZ()) == ((int) z)) {
                        ClientUtils.displayChatMessage("\u00a77[\u00a78\u00a7lTeleport\u00a77] \u00a73You were teleported to \u00a78" + x + "\u00a73, \u00a78" + y + "\u00a73, \u00a78" + z);
                        this.endPos = null;
                    } else {
                        ClientUtils.displayChatMessage("\u00a77[\u00a78\u00a7lTeleport\u00a77] \u00a73Teleport try...");
                    }
                    MovementUtils.forward(0.04d);
                    break;
                case "minesucht":
                    if (thePlayer.isSneaking()) {
                        f157mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(x, y, z, true));
                        ClientUtils.displayChatMessage("\u00a77[\u00a78\u00a7lTeleport\u00a77] \u00a73You were teleported to \u00a78" + x + "\u00a73, \u00a78" + y + "\u00a73, \u00a78" + z);
                        break;
                    }
                    break;
            }
        }
    }

    private static void lambda$onUpdate$0(IPacket iPacket) {
        f157mc.getNetHandler().addToSendQueue(iPacket);
    }

    private static void lambda$onUpdate$1(IEntityPlayerSP iEntityPlayerSP, double d, double d2, double d3, Vector3d vector3d) {
        f157mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(vector3d.x, vector3d.y, vector3d.z, true));
        iEntityPlayerSP.setPosition(d, d2, d3);
    }

    @EventTarget
    public void onRender3D(Render3DEvent render3DEvent) {
        IEntityPlayerSP thePlayer;
        if (((String) this.modeValue.get()).equals("AAC3.5.0") || (thePlayer = f157mc.getThePlayer()) == null) {
            return;
        }
        WVec3 lookVec = thePlayer.getLookVec();
        WVec3 wVec3 = new WVec3(lookVec.getXCoord() * 300.0d, lookVec.getYCoord() * 300.0d, lookVec.getZCoord() * 300.0d);
        WVec3 wVec32 = new WVec3(thePlayer.getPosX(), thePlayer.getPosY() + 1.62d, thePlayer.getPosZ());
        this.objectPosition = f157mc.getTheWorld().rayTraceBlocks(wVec32, wVec32.add(wVec3), false, ((Boolean) this.ignoreNoCollision.get()).booleanValue(), false);
        if (this.objectPosition == null || this.objectPosition.getBlockPos() == null) {
            return;
        }
        this.fixedY = classProvider.isBlockFence(BlockUtils.getBlock(this.objectPosition.getBlockPos())) ? f157mc.getTheWorld().getCollidingBoundingBoxes(thePlayer, thePlayer.getEntityBoundingBox().offset((((double) this.objectPosition.getBlockPos().getX()) + 0.5d) - thePlayer.getPosX(), (((double) this.objectPosition.getBlockPos().getY()) + 1.5d) - thePlayer.getPosY(), (((double) this.objectPosition.getBlockPos().getZ()) + 0.5d) - thePlayer.getPosZ())).isEmpty() ? 0.5d : 0.0d : classProvider.isBlockFence(BlockUtils.getBlock(new WBlockPos(this.objectPosition.getBlockPos().getX(), this.objectPosition.getBlockPos().getY() - 1, this.objectPosition.getBlockPos().getZ()))) ? (!f157mc.getTheWorld().getCollidingBoundingBoxes(thePlayer, thePlayer.getEntityBoundingBox().offset((((double) this.objectPosition.getBlockPos().getX()) + 0.5d) - thePlayer.getPosX(), (((double) this.objectPosition.getBlockPos().getY()) + 0.5d) - thePlayer.getPosY(), (((double) this.objectPosition.getBlockPos().getZ()) + 0.5d) - thePlayer.getPosZ())).isEmpty() || BlockUtils.getBlock(this.objectPosition.getBlockPos()).getCollisionBoundingBox(f157mc.getTheWorld(), this.objectPosition.getBlockPos(), BlockUtils.getBlock(this.objectPosition.getBlockPos()).getDefaultState()) == null) ? 0.0d : -0.5d : classProvider.isBlockSnow(BlockUtils.getBlock(this.objectPosition.getBlockPos())) ? 0.875d : 0.0d;
        int x = this.objectPosition.getBlockPos().getX();
        double y = ((BlockUtils.getBlock(this.objectPosition.getBlockPos()).getCollisionBoundingBox(f157mc.getTheWorld(), this.objectPosition.getBlockPos(), BlockUtils.getBlock(this.objectPosition.getBlockPos()).getDefaultState()) == null ? this.objectPosition.getBlockPos().getY() + 1 : BlockUtils.getBlock(this.objectPosition.getBlockPos()).getCollisionBoundingBox(f157mc.getTheWorld(), this.objectPosition.getBlockPos(), BlockUtils.getBlock(this.objectPosition.getBlockPos()).getDefaultState()).getMaxY()) - 1.0d) + this.fixedY;
        int z = this.objectPosition.getBlockPos().getZ();
        if (!classProvider.isBlockAir(BlockUtils.getBlock(this.objectPosition.getBlockPos()))) {
            IRenderManager renderManager = f157mc.getRenderManager();
            GL11.glBlendFunc(SGL.GL_SRC_ALPHA, SGL.GL_ONE_MINUS_SRC_ALPHA);
            GL11.glEnable(SGL.GL_BLEND);
            GL11.glLineWidth(2.0f);
            GL11.glDisable(SGL.GL_TEXTURE_2D);
            GL11.glDisable(SGL.GL_DEPTH_TEST);
            GL11.glDepthMask(false);
            Color color = ((!((String) this.modeValue.get()).equalsIgnoreCase("minesucht") || ((double) thePlayer.getPosition().getY()) == y + 1.0d) && f157mc.getTheWorld().getCollidingBoundingBoxes(thePlayer, thePlayer.getEntityBoundingBox().offset((((double) x) + 0.5d) - thePlayer.getPosX(), (y + 1.0d) - thePlayer.getPosY(), (((double) z) + 0.5d) - thePlayer.getPosZ())).isEmpty()) ? new Color(0, 255, 0, 90) : new Color(255, 0, 0, 90);
            RenderUtils.glColor(color);
            RenderUtils.drawFilledBox(classProvider.createAxisAlignedBB(x - renderManager.getRenderPosX(), (y + 1.0d) - renderManager.getRenderPosY(), z - renderManager.getRenderPosZ(), (x - renderManager.getRenderPosX()) + 1.0d, (y + 1.2d) - renderManager.getRenderPosY(), (z - renderManager.getRenderPosZ()) + 1.0d));
            GL11.glEnable(SGL.GL_TEXTURE_2D);
            GL11.glEnable(SGL.GL_DEPTH_TEST);
            GL11.glDepthMask(true);
            GL11.glDisable(SGL.GL_BLEND);
            RenderUtils.renderNameTag(Math.round(thePlayer.getDistance(x + 0.5d, y + 1.0d, z + 0.5d)) + "m", x + 0.5d, y + 1.7d, z + 0.5d);
            GL11.glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
        }
    }

    @EventTarget
    public void onMove(MoveEvent moveEvent) {
        if (((String) this.modeValue.get()).equalsIgnoreCase("aac3.5.0") && this.freeze) {
            moveEvent.zeroXZ();
        }
    }

    @EventTarget
    public void onPacket(PacketEvent packetEvent) {
        ICPacketPlayer iCPacketPlayerAsCPacketPlayer;
        IPacket packet = packetEvent.getPacket();
        if (!this.disableLogger && classProvider.isCPacketPlayer(packet)) {
            iCPacketPlayerAsCPacketPlayer = packet.asCPacketPlayer();
            switch (((String) this.modeValue.get()).toLowerCase()) {
                case "spoof":
                    if (this.endPos != null) {
                        iCPacketPlayerAsCPacketPlayer.setX(this.endPos.getX() + 0.5d);
                        iCPacketPlayerAsCPacketPlayer.setY(this.endPos.getY() + 1);
                        iCPacketPlayerAsCPacketPlayer.setZ(this.endPos.getZ() + 0.5d);
                        f157mc.getThePlayer().setPosition(this.endPos.getX() + 0.5d, this.endPos.getY() + 1, this.endPos.getZ() + 0.5d);
                        break;
                    }
                    break;
                case "aac3.5.0":
                    if (this.flyTimer.hasTimePassed(60)) {
                        packetEvent.cancelEvent();
                        if (classProvider.isCPacketPlayerPosition(packet) || classProvider.isCPacketPlayerPosLook(packet)) {
                            this.packets.add(packet);
                            break;
                        }
                    }
                    break;
            }
        }
    }

    public String getTag() {
        return (String) this.modeValue.get();
    }
}
